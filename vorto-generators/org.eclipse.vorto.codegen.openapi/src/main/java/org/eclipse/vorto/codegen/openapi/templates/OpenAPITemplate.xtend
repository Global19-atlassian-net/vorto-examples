/**
 * Copyright (c) 2019 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.vorto.codegen.openapi.templates

import org.eclipse.vorto.codegen.openapi.Utils
import org.eclipse.vorto.core.api.model.datatype.ConstraintIntervalType
import org.eclipse.vorto.core.api.model.datatype.ObjectPropertyType
import org.eclipse.vorto.core.api.model.datatype.PrimitivePropertyType
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel
import org.eclipse.vorto.model.PrimitiveType
import org.eclipse.vorto.plugin.generator.InvocationContext
import org.eclipse.vorto.plugin.generator.utils.IFileTemplate

class OpenAPITemplate implements IFileTemplate<InformationModel> {
	
	override getFileName(InformationModel model) {
		'''«model.name»-openapi-v3.yml'''
	}
	
	override getPath(InformationModel context) {
		return null
	}
	
	override getContent(InformationModel infomodel, InvocationContext context) {
		'''
		### Generated by Eclipse Vorto OpenAPI Generator from Model '«infomodel.namespace»:«infomodel.name»:«infomodel.version»'
		openapi: 3.0.0
		info:
		  title: Bosch IoT Things HTTP API for «infomodel.name» 
		  description: JSON-based, REST-like API for <a href="https://vorto.eclipse.org/#/details/«infomodel.namespace»:«infomodel.name»:«infomodel.version»">«infomodel.name» Vorto Model</a>
		  version: "2"
		servers:
		  - url: https://things.eu-1.bosch-iot-suite.com/api/2
		    description: "Bosch IoT Things Service"
		tags:
		  - name: Features
		    description: Features of your «infomodel.name» things
		security:
		  - thingsApiToken: []
		    bearerAuth: []
		    BoschID: []
		paths:
		  ###
		  ### «infomodel.name» Features
		  ###
		  '/things/{thingId}/features':
		    get:
		      summary: List all features of a «infomodel.name» 
		      description: >-
		        Returns all features of the «infomodel.name» thing identified by the `thingId` path parameter.
		      tags:
		      - Features
		      parameters:
		      - $ref: '#/components/parameters/thingIdPathParam'
		      responses:
		        '200':
		          description: >-
		            The list of features of the «infomodel.name» were successfully retrieved.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/«infomodel.name»Features'
		        '304':
		          $ref: '#/components/responses/notModified'
		        '400':
		          description: |-
		            The request could not be completed. The `thingId` either
		
		              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
		              * does not conform to RFC-2396 (URI)
		
		            Or at least one of the defined query parameters was invalid.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '401':
		          description: The request could not be completed due to missing authentication.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '404':
		          description: >-
		            The request could not be completed. The Thing with the given ID was not found or the Features have not
		            been defined.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '412':
		          $ref: '#/components/responses/preconditionFailed'
		  «FOR fbProperty : infomodel.properties»
		  '/things/{thingId}/features/«fbProperty.name»':
		    get:
		      summary: Retrieve the «fbProperty.name» of the «infomodel.name»
		      description: >-
		        Returns the «fbProperty.name» feature of the «infomodel.name» thing identified by the
		        `thingId` path parameter.
		      tags:
		      - Features
		      parameters:
		      - $ref: '#/components/parameters/thingIdPathParam'
		      responses:
		        '200':
		          description: The «fbProperty.name» was successfully retrieved.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/«fbProperty.type.name»Feature'
		        '304':
		          $ref: '#/components/responses/notModified'
		        '400':
		          description: |-
		            The request could not be completed. The `thingId` either
		              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
		              * does not conform to RFC-2396 (URI)
		            Or at least one of the defined query parameters was invalid.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '401':
		          description: The request could not be completed due to missing authentication.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '404':
		          description: >-
		            The request could not be completed. The Thing with the given ID or the Feature with the specified
		            `featureId` was not found.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '412':
		          $ref: '#/components/responses/preconditionFailed'
		          
		  '/things/{thingId}/features/«fbProperty.name»/definition':
		    get:
		      summary: List the Vorto Function Block ID of the «fbProperty.name» feature
		      description: >-
		        Returns the complete Definition of the «fbProperty.name» identified by the `thingId` path parameter.
		      tags:
		      - Features
		      parameters:
		      - $ref: '#/components/parameters/thingIdPathParam'
		      responses:
		        '200':
		          description: The Definition was successfully retrieved.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/FeatureDefinition'
		        '304':
		          $ref: '#/components/responses/notModified'
		        '400':
		          description: |-
		            The request could not be completed. The `thingId` either
		              * does not contain the mandatory namespace prefix (java package notation + `:` colon)
		              * does not conform to RFC-2396 (URI)
		            Or at least one of the defined query parameters was invalid.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '401':
		          description: The request could not be completed due to missing authentication.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '404':
		          description: >-
		            The request could not be completed. The specified Feature has no Definition or the Thing with the
		            specified `thingId` or the Feature with `featureId` was not found.
		          content:
		            application/json:
		              schema:
		                $ref: '#/components/schemas/AdvancedError'
		        '412':
		          $ref: '#/components/responses/preconditionFailed'
		«ENDFOR»
		components:
		  schemas:
		    AdvancedError:
		      properties:
		        status:
		          type: integer
		          description: The HTTP status of the error
		        error:
		          type: string
		          description: The error code of the occurred exception
		        message:
		          type: string
		          description: The message of the error - what went wrong
		        description:
		          type: string
		          description: A description how to fix the error or more details
		        href:
		          type: string
		          description: A link to further information about the error and how to fix it
		      required:
		      - status
		      - error
		      - message
		    FeatureDefinition:
		      type: array
		      minItems: 1
		      uniqueItems: true
		      items:
		        type: string
		        description: "A single fully qualified identifier of a Feature Definition in the form 'namespace:name:version'"
		        pattern: ([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+):([_a-zA-Z0-9\-.]+)
		    «FOR fb : Utils.getReferencedFunctionBlocks(infomodel)»
		    «fb.name»Properties:
		      type: object
		      description: «fb.name» properties of «infomodel.name»
		      properties:
		        «IF fb.functionblock.status !== null && !fb.functionblock.status.properties.isEmpty»
		        status:
		          type: object
		          properties:
		            «FOR statusProperty : fb.functionblock.status.properties»
		            «statusProperty.name»:
		              «IF statusProperty.type instanceof PrimitivePropertyType»
		              «getPrimitive(statusProperty.type as PrimitivePropertyType)»
		              «ELSEIF statusProperty.type instanceof ObjectPropertyType»
		              $ref: '#/components/schemas/«(statusProperty.type as ObjectPropertyType).type.name»'
		            «ENDIF»
		            «ENDFOR»
		          «Utils.calculateRequired(fb.functionblock.status.properties)»
		        «ENDIF»
		        «IF fb.functionblock.configuration !== null && !fb.functionblock.configuration.properties.isEmpty»
		        configuration:
		          type: object
		          properties:
		            «FOR configProperty : fb.functionblock.configuration.properties»
		            «configProperty.name»:
		              «IF configProperty.type instanceof PrimitivePropertyType»
		              «getPrimitive(configProperty.type as PrimitivePropertyType)»
		              «ELSEIF configProperty.type instanceof ObjectPropertyType»
		              $ref: '#/components/schemas/«(configProperty.type as ObjectPropertyType).type.name»'
		            «ENDIF»
		            «ENDFOR»
		          «Utils.calculateRequired(fb.functionblock.configuration.properties)»
		        «ENDIF»
		    «fb.name»Feature:
		      type: object
		      properties:
		        definition:
		          $ref: '#/components/schemas/FeatureDefinition'
		          description: The Definition of this «fb.name» Feature
		        properties:
		          $ref: '#/components/schemas/«fb.name»Properties'
		          description: The Properties of this «fb.name» feature
		    «ENDFOR»
		    «infomodel.name»Features:
		      type: object
		      description: >-
		        List all Features of the «infomodel.name»
		      properties:
		        «FOR fbProperty : infomodel.properties»
		        «fbProperty.name»:
		          $ref: '#/components/schemas/«fbProperty.type.name»Feature'
		        «ENDFOR»
		    «FOR entity : Utils.getReferencedEntities(infomodel)»
		    «entity.name»:
		      type: object
		      properties:
		        «FOR property : entity.properties»
		        «property.name»:
		          «IF property.type instanceof PrimitivePropertyType»
		          «getPrimitive(property.type as PrimitivePropertyType)»
		          «ELSEIF property.type instanceof ObjectPropertyType»
		          $ref: '#/components/schemas/«(property.type as ObjectPropertyType).type.name»'
		          «ENDIF»
		        «ENDFOR»
		      «Utils.calculateRequired(entity.properties)»
		    «ENDFOR»
		    «FOR enumeration : Utils.getReferencedEnums(infomodel)»
		    «enumeration.name»:
		      type: string
		      enum: [«FOR literal: enumeration.enums SEPARATOR ','»«literal.name»«ENDFOR»]
		    «ENDFOR»
		  responses:
		    notModified:
		      description: >-
		        The (sub-)resource has not been modified. This happens when you specified a If-None-Match header which
		        matches the current ETag of the (sub-)resource.
		      headers:
		        ETag:
		          description: >-
		            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
		            "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
		          schema:
		            type: string
		    preconditionFailed:
		      description: >-
		        A precondition for reading or writing the (sub-)resource failed. This will happen for write requests, when you
		        specified an If-Match or If-None-Match header which fails the precondition check against the current ETag of
		        the (sub-)resource. For read requests, this error may only happen for a failing If-Match header. In case of a
		        failing If-None-Match header for a read request, status 304 will be returned instead.
		      headers:
		        ETag:
		          description: >-
		            The (current server-side) ETag for this (sub-)resource. For top-level resources it is in the format
		            "rev:[revision]", for sub-resources it has the format "hash:[calculated-hash]".
		          schema:
		            type: string
		      content:
		        application/json:
		          schema:
		            $ref: '#/components/schemas/AdvancedError'
		  parameters:
		    thingIdPathParam:
		      name: thingId
		      in: path
		      description: |-
		        The ID of the Thing - has to:
		          * contain the mandatory namespace prefix (java package notation + `:` colon)
		          * conform to RFC-2396 (URI)
		      required: true
		      schema:
		        type: string
		  securitySchemes:
		    bearerAuth:
		      type: http
		      scheme: bearer
		      bearerFormat: JWT
		      description: |-
		        A JSON Web Token issued by a supported OAuth 2.0 Identity Provider.
		    thingsApiToken:
		      type: apiKey
		      description: |-
		        The API Token which associates the HTTP request with a specific IoT
		        Things service solution.
		      name: x-cr-api-token
		      in: header
		    BoschID:
		      type: oauth2
		      description: |-
		        Use either "OAuth2.0" with your Bosch-ID or the "Basic authentication"
		        below with a Demo user. Select the following checkbox in order to grant
		        Bosch IoT Things to access your Bosch-ID.
		      x-tokenName: id_token
		      flows:
		        authorizationCode:
		          authorizationUrl: >-
		            https://things.s-apps.de1.bosch-iot-cloud.com/oauth2/bosch-id/authorize
		          tokenUrl: 'https://things.s-apps.de1.bosch-iot-cloud.com/oauth2/bosch-id/token'
		          scopes:
		            openid: Access your Bosch-ID
		'''
	}
	
	def getPrimitive(PrimitivePropertyType primitiveType) {
		'''
		«IF primitiveType.type.equals(PrimitiveType.BASE64_BINARY)»
		type: string
		«ELSEIF primitiveType.type.equals(PrimitiveType.BOOLEAN)»
		type: boolean
		«ELSEIF primitiveType.type.equals(PrimitiveType.BYTE)»
		type: string
		«ELSEIF primitiveType.type.equals(PrimitiveType.DATETIME)»
		type: string
		«ELSEIF primitiveType.type.equals(PrimitiveType.DOUBLE)»
		type: number
		«ELSEIF primitiveType.type.equals(PrimitiveType.FLOAT)»
		type: number
		«ELSEIF primitiveType.type.equals(PrimitiveType.INT)»
		type: integer
		«ELSEIF primitiveType.type.equals(PrimitiveType.LONG)»
		type: number
		«ELSEIF primitiveType.type.equals(PrimitiveType.SHORT)»
		type: integer
		«ELSE»
		type: string
		«ENDIF»
		'''
	}
	
	def getJsonConstraint(ConstraintIntervalType type) {
		if(type == ConstraintIntervalType.STRLEN){
			return '''maxLength: '''
		} else if(type == ConstraintIntervalType.REGEX) {
			return '''pattern: '''
		} else if(type == ConstraintIntervalType.MIN) {
			return '''minimum: '''
		} else if(type == ConstraintIntervalType.MAX) {
			return '''maximum: '''
		} else if(type == ConstraintIntervalType.SCALING) {
			return '''multipleOf: '''
		} else if(type == ConstraintIntervalType.DEFAULT) {
			return '''default: '''
		}
		
		return null
	}	
	
}