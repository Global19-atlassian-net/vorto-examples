/**
 * Copyright (c) 2017 Oliver Meili
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 *  The Eclipse Public License is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *  The Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 *  Contributors:
 *  Oliver Meili <omi@ieee.org>
 */
package org.eclipse.vorto.codegen.ble.alpwise.templates;

import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.api.mapping.IMapped;
import org.eclipse.vorto.codegen.ble.templates.BleGattTemplate;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.informationmodel.FunctionblockProperty;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class AlpwiseImSourceTemplate extends BleGattTemplate<InformationModel> {
  @Override
  public String getFileName(final InformationModel model) {
    return "BleInfoModel.c";
  }
  
  @Override
  public String getPath(final InformationModel model) {
    return BleGattTemplate.rootPath;
  }
  
  @Override
  public String getContent(final InformationModel model, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* ");
    String _name = model.getName();
    _builder.append(_name, "");
    _builder.append(" generated by Vorto */");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include \"BleInfoModel.h\"");
    _builder.newLine();
    _builder.newLine();
    {
      EList<FunctionblockProperty> _properties = model.getProperties();
      for(final FunctionblockProperty fb : _properties) {
        {
          FunctionblockModel _type = fb.getType();
          IMapped<FunctionblockModel> _mappedElement = context.getMappedElement(_type, "source");
          boolean _hasAttribute = _mappedElement.hasAttribute("uuid");
          if (_hasAttribute) {
            _builder.append("#include \"");
            FunctionblockModel _type_1 = fb.getType();
            String _name_1 = _type_1.getName();
            _builder.append(_name_1, "");
            _builder.append("/");
            FunctionblockModel _type_2 = fb.getType();
            String _name_2 = _type_2.getName();
            _builder.append(_name_2, "");
            _builder.append(".h\"");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("/* FIXME: need to deal with multiple instances of the same type */");
    _builder.newLine();
    _builder.append("const ");
    String _name_3 = model.getName();
    _builder.append(_name_3, "");
    _builder.append("_t BleInfoModel = {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    int i = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<FunctionblockProperty> _properties_1 = model.getProperties();
      for(final FunctionblockProperty fb_1 : _properties_1) {
        {
          FunctionblockModel _type_3 = fb_1.getType();
          IMapped<FunctionblockModel> _mappedElement_1 = context.getMappedElement(_type_3, "source");
          boolean _hasAttribute_1 = _mappedElement_1.hasAttribute("uuid");
          if (_hasAttribute_1) {
            _builder.append("\t");
            _builder.append(".");
            String _name_4 = fb_1.getName();
            _builder.append(_name_4, "\t");
            _builder.append(" = &(");
            FunctionblockModel _type_4 = fb_1.getType();
            String _name_5 = _type_4.getName();
            _builder.append(_name_5, "\t");
            _builder.append("_Instances[");
            int _plusPlus = i++;
            _builder.append(_plusPlus, "\t");
            _builder.append("]),");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("};");
    _builder.newLine();
    return _builder.toString();
  }
}
