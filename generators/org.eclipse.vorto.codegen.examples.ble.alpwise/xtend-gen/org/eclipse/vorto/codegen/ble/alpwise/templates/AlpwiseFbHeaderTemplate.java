/**
 * Copyright (c) 2017 Oliver Meili
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 *  The Eclipse Public License is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *  The Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 *  Contributors:
 *  Oliver Meili <omi@ieee.org>
 */
package org.eclipse.vorto.codegen.ble.alpwise.templates;

import java.io.File;
import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.api.mapping.IMapped;
import org.eclipse.vorto.codegen.ble.model.BleInvocationContext;
import org.eclipse.vorto.codegen.ble.model.blegatt.Device;
import org.eclipse.vorto.codegen.ble.model.blegatt.Service;
import org.eclipse.vorto.codegen.ble.templates.BleGattTemplate;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.functionblock.FunctionBlock;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.functionblock.Status;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class AlpwiseFbHeaderTemplate extends BleGattTemplate<FunctionblockModel> {
  @Override
  public String getFileName(final FunctionblockModel fb) {
    String _name = fb.getName();
    return (_name + ".h");
  }
  
  @Override
  public String getPath(final FunctionblockModel fb) {
    String _name = fb.getName();
    return ((BleGattTemplate.rootPath + File.separator) + _name);
  }
  
  @Override
  public String getContent(final FunctionblockModel fb, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* ");
    String _name = fb.getName();
    _builder.append(_name, "");
    _builder.append(" generated by Vorto */");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#ifndef __");
    String _name_1 = fb.getName();
    String _upperCase = _name_1.toUpperCase();
    _builder.append(_upperCase, "");
    _builder.append("_H__");
    _builder.newLineIfNotEmpty();
    _builder.append("#define __");
    String _name_2 = fb.getName();
    String _upperCase_1 = _name_2.toUpperCase();
    _builder.append(_upperCase_1, "");
    _builder.append("_H__");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <stdint.h>");
    _builder.newLine();
    _builder.append("#include <AttBase.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"BleUtils.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"services/");
    Device _device = ((BleInvocationContext) context).getDevice();
    Service _findService = this.findService(_device, fb);
    String _name_3 = _findService.getName();
    _builder.append(_name_3, "");
    _builder.append("Service.h\"");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#define ENABLE_");
    String _name_4 = fb.getName();
    String _upperCase_2 = _name_4.toUpperCase();
    _builder.append(_upperCase_2, "");
    _builder.append("_NOTIFICATIONS 1");
    _builder.newLineIfNotEmpty();
    _builder.append("#define NUM_");
    String _name_5 = fb.getName();
    String _upperCase_3 = _name_5.toUpperCase();
    _builder.append(_upperCase_3, "");
    _builder.append("_SERVICES         1");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// Configuration per service instance");
    _builder.newLine();
    _builder.append("typedef struct _");
    String _name_6 = fb.getName();
    _builder.append(_name_6, "");
    _builder.append("_t {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    Device _device_1 = ((BleInvocationContext) context).getDevice();
    Service _findService_1 = this.findService(_device_1, fb);
    String _name_7 = _findService_1.getName();
    _builder.append(_name_7, "\t");
    _builder.append("Service_t *service;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Configuration and status per characteristic");
    _builder.newLine();
    {
      FunctionBlock _functionblock = fb.getFunctionblock();
      Status _status = _functionblock.getStatus();
      EList<Property> _properties = _status.getProperties();
      for(final Property status : _properties) {
        {
          IMapped<Property> _mappedElement = context.getMappedElement(status, "source");
          boolean _hasAttribute = _mappedElement.hasAttribute("uuid");
          if (_hasAttribute) {
            _builder.append("\t");
            _builder.append("uint8_t *");
            String _name_8 = status.getName();
            String _firstUpper = StringExtensions.toFirstUpper(_name_8);
            _builder.append(_firstUpper, "\t");
            _builder.append("Value;");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("} ");
    String _name_9 = fb.getName();
    _builder.append(_name_9, "");
    _builder.append("_t;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("const ");
    String _name_10 = fb.getName();
    _builder.append(_name_10, "");
    _builder.append("_t ");
    String _name_11 = fb.getName();
    _builder.append(_name_11, "");
    _builder.append("_Instances[NUM_");
    String _name_12 = fb.getName();
    String _upperCase_4 = _name_12.toUpperCase();
    _builder.append(_upperCase_4, "");
    _builder.append("_SERVICES];");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("void ");
    String _name_13 = fb.getName();
    _builder.append(_name_13, "");
    _builder.append("_Init(void);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      FunctionBlock _functionblock_1 = fb.getFunctionblock();
      Status _status_1 = _functionblock_1.getStatus();
      EList<Property> _properties_1 = _status_1.getProperties();
      for(final Property status_1 : _properties_1) {
        {
          IMapped<Property> _mappedElement_1 = context.getMappedElement(status_1, "source");
          boolean _hasAttribute_1 = _mappedElement_1.hasAttribute("uuid");
          if (_hasAttribute_1) {
            _builder.append("void ");
            String _name_14 = fb.getName();
            _builder.append(_name_14, "");
            _builder.append("_Set");
            String _name_15 = status_1.getName();
            String _firstUpper_1 = StringExtensions.toFirstUpper(_name_15);
            _builder.append(_firstUpper_1, "");
            _builder.append("Value(");
            String _name_16 = fb.getName();
            _builder.append(_name_16, "");
            _builder.append("_t *");
            String _name_17 = fb.getName();
            String _lowerCase = _name_17.toLowerCase();
            _builder.append(_lowerCase, "");
            _builder.append(", ");
            IMapped<Property> _mappedElement_2 = context.getMappedElement(status_1, "source");
            String _attributeValue = _mappedElement_2.getAttributeValue("datatype", "uint16");
            _builder.append(_attributeValue, "");
            _builder.append("_t value);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("#endif /* __");
    String _name_18 = fb.getName();
    String _upperCase_5 = _name_18.toUpperCase();
    _builder.append(_upperCase_5, "");
    _builder.append("_H__ */");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
}
