/**
 * Copyright (c) 2017 Oliver Meili
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 *  The Eclipse Public License is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *  The Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 *  Contributors:
 *  Oliver Meili <omi@ieee.org>
 */
package org.eclipse.vorto.codegen.ble.alpwise.templates;

import com.google.common.base.Objects;
import com.google.common.base.Strings;
import java.io.File;
import java.util.UUID;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.ble.model.blegatt.Characteristic;
import org.eclipse.vorto.codegen.ble.model.blegatt.CharacteristicProperty;
import org.eclipse.vorto.codegen.ble.model.blegatt.Service;
import org.eclipse.vorto.codegen.ble.templates.BleGattTemplate;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class AlpwiseServiceSourceTemplate extends BleGattTemplate<Service> {
  private UUID uuid;
  
  @Override
  public String getFileName(final Service service) {
    String _name = service.getName();
    return (_name + "Service.c");
  }
  
  @Override
  public String getPath(final Service service) {
    return ((BleGattTemplate.rootPath + File.separator) + "services");
  }
  
  @Override
  public String getContent(final Service service, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/* ");
    String _name = service.getName();
    _builder.append(_name, "");
    _builder.append("Service generated by Vorto */");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <stdint.h>");
    _builder.newLine();
    _builder.append("#include <stdio.h>");
    _builder.newLine();
    _builder.append("#include <assert.h>");
    _builder.newLine();
    _builder.append("#include <BleTypes.h>");
    _builder.newLine();
    _builder.append("#include <attserver.h>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"BleUtils.h\"");
    _builder.newLine();
    _builder.append("#include \"BleApp_Cbk.h\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#include \"");
    String _name_1 = service.getName();
    _builder.append(_name_1, "");
    _builder.append("Service.h\"");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    String _name_2 = service.getName();
    _builder.append(_name_2, "");
    _builder.append("Service_t ");
    String _name_3 = service.getName();
    _builder.append(_name_3, "");
    _builder.append("Service_Instances[NUM_");
    String _name_4 = service.getName();
    String _upperCase = _name_4.toUpperCase();
    _builder.append(_upperCase, "");
    _builder.append("_SERVICES] = {");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* ");
    String _name_5 = service.getName();
    _builder.append(_name_5, "\t");
    _builder.append(" Service UUID: ");
    String _uuid = service.getUuid();
    _builder.append(_uuid, "\t");
    _builder.append(" */");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(".uuid = { ");
    String _uuid_1 = service.getUuid();
    String _convertUuidToByteArray = this.convertUuidToByteArray(_uuid_1);
    _builder.append(_convertUuidToByteArray, "\t");
    _builder.append(" },");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(".ServiceHandle = { 0 },");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Characteristic> _characteristics = service.getCharacteristics();
      for(final Characteristic ch : _characteristics) {
        _builder.append("\t");
        _builder.append("/* ");
        String _name_6 = ch.getName();
        _builder.append(_name_6, "\t");
        _builder.append(" characteristic properties */");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("/* UUID: ");
        String _uuid_2 = ch.getUuid();
        _builder.append(_uuid_2, "\t");
        _builder.append(" */");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(".");
        String _name_7 = ch.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_7);
        _builder.append(_firstUpper, "\t");
        _builder.append(" = {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append(".uuid = { ");
        String _uuid_3 = ch.getUuid();
        String _convertUuidToByteArray_1 = this.convertUuidToByteArray(_uuid_3);
        _builder.append(_convertUuidToByteArray_1, "\t\t\t\t");
        _builder.append(" },");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append(".flags = 0x00 ");
        {
          boolean _isIsReadable = ch.isIsReadable();
          if (_isIsReadable) {
            _builder.append(" | ATTPROPERTY_READ");
          }
        }
        {
          boolean _isIsWritable = ch.isIsWritable();
          if (_isIsWritable) {
            _builder.append(" | ATTPROPERTY_WRITE");
          }
        }
        {
          boolean _isIsEventable = ch.isIsEventable();
          if (_isIsEventable) {
            _builder.append(" | ATTPROPERTY_NOTIFY");
          }
        }
        _builder.append(" ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("},");
        _builder.newLine();
        {
          String _value = ch.getValue();
          boolean _equals = Objects.equal(_value, null);
          if (_equals) {
            _builder.append("\t");
            _builder.append(".");
            String _name_8 = ch.getName();
            String _firstUpper_1 = StringExtensions.toFirstUpper(_name_8);
            _builder.append(_firstUpper_1, "\t");
            _builder.append("Value = { 0xFF },");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append(".");
            String _name_9 = ch.getName();
            String _firstUpper_2 = StringExtensions.toFirstUpper(_name_9);
            _builder.append(_firstUpper_2, "\t");
            _builder.append("Value = ");
            String _value_1 = ch.getValue();
            _builder.append(_value_1, "\t");
            _builder.append(",");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("static BleStatus ");
    String _name_10 = service.getName();
    _builder.append(_name_10, "");
    _builder.append("Service_RegisterService(");
    String _name_11 = service.getName();
    _builder.append(_name_11, "");
    _builder.append("Service_t *");
    String _name_12 = service.getName();
    String _lowerCase = _name_12.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("static void ");
    String _name_13 = service.getName();
    _builder.append(_name_13, "");
    _builder.append("Service_ServiceCallback(AttServerCallbackParms* serverCallbackParms);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("void ");
    String _name_14 = service.getName();
    _builder.append(_name_14, "");
    _builder.append("Service_Init()");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int i;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (i = 0; i < NUM_");
    String _name_15 = service.getName();
    String _upperCase_1 = _name_15.toUpperCase();
    _builder.append(_upperCase_1, "\t");
    _builder.append("_SERVICES; i++)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    {
      EList<Characteristic> _characteristics_1 = service.getCharacteristics();
      for(final Characteristic ch_1 : _characteristics_1) {
        _builder.append("\t\t");
        String _name_16 = service.getName();
        _builder.append(_name_16, "\t\t");
        _builder.append("Service_Instances[i].");
        String _name_17 = ch_1.getName();
        String _firstUpper_3 = StringExtensions.toFirstUpper(_name_17);
        _builder.append(_firstUpper_3, "\t\t");
        _builder.append(".type.size = ATT_UUID_SIZE_128;");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _name_18 = service.getName();
        _builder.append(_name_18, "\t\t");
        _builder.append("Service_Instances[i].");
        String _name_19 = ch_1.getName();
        String _firstUpper_4 = StringExtensions.toFirstUpper(_name_19);
        _builder.append(_firstUpper_4, "\t\t");
        _builder.append(".type.value.uuid128 = (uint8_t *)&(");
        String _name_20 = service.getName();
        _builder.append(_name_20, "\t\t");
        _builder.append("Service_Instances[i].");
        String _name_21 = ch_1.getName();
        String _firstUpper_5 = StringExtensions.toFirstUpper(_name_21);
        _builder.append(_firstUpper_5, "\t\t");
        _builder.append(".uuid);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    String _name_22 = service.getName();
    _builder.append(_name_22, "\t\t");
    _builder.append("Service_RegisterService(&(");
    String _name_23 = service.getName();
    _builder.append(_name_23, "\t\t");
    _builder.append("Service_Instances[i]));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("static BleStatus ");
    String _name_24 = service.getName();
    _builder.append(_name_24, "");
    _builder.append("Service_RegisterService(");
    String _name_25 = service.getName();
    _builder.append(_name_25, "");
    _builder.append("Service_t *");
    String _name_26 = service.getName();
    String _lowerCase_1 = _name_26.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ATT_SERVER_SecureDatabaseAccess();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/* Register the service callback for the ");
    String _name_27 = service.getName();
    _builder.append(_name_27, "\t");
    _builder.append(" service */");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (ATT_SERVER_RegisterServiceAttribute(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ATTPDU_SIZEOF_128_BIT_UUID, (uint8_t *) ");
    String _name_28 = service.getName();
    String _lowerCase_2 = _name_28.toLowerCase();
    _builder.append(_lowerCase_2, "\t\t");
    _builder.append("->uuid,");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_29 = service.getName();
    _builder.append(_name_29, "\t\t");
    _builder.append("Service_ServiceCallback, &(");
    String _name_30 = service.getName();
    String _lowerCase_3 = _name_30.toLowerCase();
    _builder.append(_lowerCase_3, "\t\t");
    _builder.append("->ServiceHandle)) == BLESTATUS_FAILED)");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ATT_SERVER_ReleaseDatabaseAccess();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return BLESTATUS_FAILED;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Characteristic> _characteristics_2 = service.getCharacteristics();
      for(final Characteristic ch_2 : _characteristics_2) {
        _builder.append("\t");
        _builder.append("/* Register the ");
        String _name_31 = ch_2.getName();
        String _firstUpper_6 = StringExtensions.toFirstUpper(_name_31);
        _builder.append(_firstUpper_6, "\t");
        _builder.append(" characteristic of the ");
        String _name_32 = service.getName();
        _builder.append(_name_32, "\t");
        _builder.append(" Service */");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("if (ATT_SERVER_AddCharacteristic(");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ATTPROPERTY_READ | ATTPROPERTY_NOTIFY,");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("(Att16BitCharacteristicAttribute*) &");
        String _name_33 = service.getName();
        String _lowerCase_4 = _name_33.toLowerCase();
        _builder.append(_lowerCase_4, "\t\t");
        _builder.append("->");
        String _name_34 = ch_2.getName();
        String _firstUpper_7 = StringExtensions.toFirstUpper(_name_34);
        _builder.append(_firstUpper_7, "\t\t");
        _builder.append(".characteristic,");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("&");
        String _name_35 = service.getName();
        String _lowerCase_5 = _name_35.toLowerCase();
        _builder.append(_lowerCase_5, "\t\t");
        _builder.append("->");
        String _name_36 = ch_2.getName();
        String _firstUpper_8 = StringExtensions.toFirstUpper(_name_36);
        _builder.append(_firstUpper_8, "\t\t");
        _builder.append(".type,");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ATT_PERMISSIONS_ALLACCESS,");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("(sizeof(");
        String _name_37 = service.getName();
        String _lowerCase_6 = _name_37.toLowerCase();
        _builder.append(_lowerCase_6, "\t\t");
        _builder.append("->");
        String _name_38 = ch_2.getName();
        String _firstUpper_9 = StringExtensions.toFirstUpper(_name_38);
        _builder.append(_firstUpper_9, "\t\t");
        _builder.append(") / sizeof(uint8_t)),");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("(uint8_t *) &");
        String _name_39 = service.getName();
        String _lowerCase_7 = _name_39.toLowerCase();
        _builder.append(_lowerCase_7, "\t\t");
        _builder.append("->");
        String _name_40 = ch_2.getName();
        String _firstUpper_10 = StringExtensions.toFirstUpper(_name_40);
        _builder.append(_firstUpper_10, "\t\t");
        _builder.append("Value, 0, 0,");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("&");
        String _name_41 = service.getName();
        String _lowerCase_8 = _name_41.toLowerCase();
        _builder.append(_lowerCase_8, "\t\t");
        _builder.append("->ServiceHandle,");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("&");
        String _name_42 = service.getName();
        String _lowerCase_9 = _name_42.toLowerCase();
        _builder.append(_lowerCase_9, "\t\t");
        _builder.append("->");
        String _name_43 = ch_2.getName();
        String _firstUpper_11 = StringExtensions.toFirstUpper(_name_43);
        _builder.append(_firstUpper_11, "\t\t");
        _builder.append(".attr) == BLESTATUS_FAILED)");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ATT_SERVER_ReleaseDatabaseAccess();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return BLESTATUS_FAILED;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ATT_SERVER_ReleaseDatabaseAccess();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return BLESTATUS_SUCCESS;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("static void ");
    String _name_44 = service.getName();
    _builder.append(_name_44, "");
    _builder.append("Service_ServiceCallback(AttServerCallbackParms* serverCallbackParms)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("printf(\"### ");
    String _name_45 = service.getName();
    _builder.append(_name_45, "\t");
    _builder.append(" Service Callback\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("switch (serverCallbackParms->event) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("case ATTEVT_SERVER_READ_REQ:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("printf(\"");
    String _name_46 = service.getName();
    _builder.append(_name_46, "\t\t");
    _builder.append(" service callback: \");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("serverCallbackParms->status = ATTSTATUS_SUCCESS;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < NUM_");
    String _name_47 = service.getName();
    String _upperCase_2 = _name_47.toUpperCase();
    _builder.append(_upperCase_2, "\t\t");
    _builder.append("_SERVICES; i++){");
    _builder.newLineIfNotEmpty();
    {
      EList<Characteristic> _characteristics_3 = service.getCharacteristics();
      for(final Characteristic ch_3 : _characteristics_3) {
        _builder.append("\t\t\t");
        _builder.append("if (serverCallbackParms->parms.readReq.attribute");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("\t\t");
        _builder.append("== &(");
        String _name_48 = service.getName();
        _builder.append(_name_48, "\t\t\t\t\t");
        _builder.append("Service_Instances[i].");
        String _name_49 = ch_3.getName();
        String _firstUpper_12 = StringExtensions.toFirstUpper(_name_49);
        _builder.append(_firstUpper_12, "\t\t\t\t\t");
        _builder.append(".attr)) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t");
        _builder.append("\t");
        _builder.append("printf(\"");
        String _name_50 = ch_3.getName();
        String _firstUpper_13 = StringExtensions.toFirstUpper(_name_50);
        _builder.append(_firstUpper_13, "\t\t\t\t");
        _builder.append(" characteristic\\n\");");
        _builder.newLineIfNotEmpty();
        {
          String _value_2 = ch_3.getValue();
          boolean _equals_1 = Objects.equal(_value_2, null);
          if (_equals_1) {
            {
              EList<CharacteristicProperty> _properties = ch_3.getProperties();
              for(final CharacteristicProperty prop : _properties) {
                _builder.append("\t\t\t");
                _builder.append("\t");
                Property _property = prop.getProperty();
                EObject _eContainer = _property.eContainer();
                EObject _eContainer_1 = _eContainer.eContainer();
                EObject _eContainer_2 = _eContainer_1.eContainer();
                String _name_51 = ((FunctionblockModel) _eContainer_2).getName();
                _builder.append(_name_51, "\t\t\t\t");
                _builder.append("_Cbk_");
                Property _property_1 = prop.getProperty();
                String _name_52 = _property_1.getName();
                String _firstUpper_14 = StringExtensions.toFirstUpper(_name_52);
                _builder.append(_firstUpper_14, "\t\t\t\t");
                _builder.append("(&");
                Property _property_2 = prop.getProperty();
                EObject _eContainer_3 = _property_2.eContainer();
                EObject _eContainer_4 = _eContainer_3.eContainer();
                EObject _eContainer_5 = _eContainer_4.eContainer();
                String _name_53 = ((FunctionblockModel) _eContainer_5).getName();
                _builder.append(_name_53, "\t\t\t\t");
                _builder.append("_Instances[i]);");
                _builder.newLineIfNotEmpty();
              }
            }
          } else {
            _builder.append("\t\t\t");
            _builder.append("\t");
            String _name_54 = service.getName();
            _builder.append(_name_54, "\t\t\t\t");
            _builder.append("Service_WriteAndNotifyValue(&");
            String _name_55 = service.getName();
            _builder.append(_name_55, "\t\t\t\t");
            _builder.append("Service_Instances[i].");
            String _name_56 = ch_3.getName();
            String _firstUpper_15 = StringExtensions.toFirstUpper(_name_56);
            _builder.append(_firstUpper_15, "\t\t\t\t");
            _builder.append(", &");
            String _name_57 = service.getName();
            _builder.append(_name_57, "\t\t\t\t");
            _builder.append("Service_Instances[i].");
            String _name_58 = ch_3.getName();
            String _firstUpper_16 = StringExtensions.toFirstUpper(_name_58);
            _builder.append(_firstUpper_16, "\t\t\t\t");
            _builder.append("Value, ");
            int _length = ch_3.getLength();
            _builder.append(_length, "\t\t\t\t");
            _builder.append(", 1);");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("void ");
    String _name_59 = service.getName();
    _builder.append(_name_59, "");
    _builder.append("Service_WriteAndNotifyValue(characteristicProperty_t *ch, uint8_t *value, uint8_t length, uint8_t notify)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("BleStatus status;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ATT_SERVER_SecureDatabaseAccess();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("status = ATT_SERVER_WriteAttributeValue(&ch->attr, (const uint8_t *)value,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("length);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#if ENABLE_");
    String _name_60 = service.getName();
    String _upperCase_3 = _name_60.toUpperCase();
    _builder.append(_upperCase_3, "");
    _builder.append("_NOTIFICATIONS");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if ((notify != 0) && (status == BLESTATUS_SUCCESS)) /* send notification */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("status = ATT_SERVER_SendNotification(&ch->attr, 1);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("printf(\"");
    String _name_61 = service.getName();
    _builder.append(_name_61, "\t\t");
    _builder.append(" notification, ");
    String _name_62 = service.getName();
    String _firstUpper_17 = StringExtensions.toFirstUpper(_name_62);
    _builder.append(_firstUpper_17, "\t\t");
    _builder.append(": %d\\n\", value[0] + 256*value[1]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("printSendNotificationError(status);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assert(status != BLESTATUS_FAILED);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ATT_SERVER_ReleaseDatabaseAccess();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#if !ENABLE_");
    String _name_63 = service.getName();
    String _upperCase_4 = _name_63.toUpperCase();
    _builder.append(_upperCase_4, "");
    _builder.append("_NOTIFICATIONS");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("(void) status;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("(void) notify;");
    _builder.newLine();
    _builder.append("#endif");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String convertUuidToByteArray(final String str) {
    UUID uuid = UUID.fromString(str);
    String result = "";
    boolean _isNullOrEmpty = Strings.isNullOrEmpty(str);
    boolean _not = (!_isNullOrEmpty);
    if (_not) {
      for (int i = 0; (i < 8); i++) {
        String _result = result;
        long _leastSignificantBits = uuid.getLeastSignificantBits();
        long _doubleGreaterThan = (_leastSignificantBits >> (i * 8));
        long _modulo = (_doubleGreaterThan % 0x100);
        Long _long = new Long(_modulo);
        byte _byteValue = _long.byteValue();
        String _format = String.format("0x%02x", Byte.valueOf(_byteValue));
        String _plus = (_format + ", ");
        result = (_result + _plus);
      }
      for (int i = 0; (i < 8); i++) {
        {
          String _result = result;
          long _mostSignificantBits = uuid.getMostSignificantBits();
          long _doubleGreaterThan = (_mostSignificantBits >> (i * 8));
          long _modulo = (_doubleGreaterThan % 0x100);
          Long _long = new Long(_modulo);
          byte _byteValue = _long.byteValue();
          String _format = String.format("0x%02x", Byte.valueOf(_byteValue));
          result = (_result + _format);
          if ((i < 7)) {
            String _result_1 = result;
            result = (_result_1 + ", ");
          }
        }
      }
    }
    return result;
  }
}
