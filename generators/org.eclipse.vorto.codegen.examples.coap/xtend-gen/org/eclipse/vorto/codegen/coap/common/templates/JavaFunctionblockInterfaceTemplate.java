/**
 * Copyright (c) 2015 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.coap.common.templates;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.ITemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.coap.CoAPUtils;
import org.eclipse.vorto.codegen.utils.Utils;
import org.eclipse.vorto.core.api.model.datatype.PrimitiveType;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.datatype.Type;
import org.eclipse.vorto.core.api.model.functionblock.FunctionBlock;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.functionblock.Operation;
import org.eclipse.vorto.core.api.model.functionblock.Param;
import org.eclipse.vorto.core.api.model.functionblock.ReturnObjectType;
import org.eclipse.vorto.core.api.model.functionblock.ReturnPrimitiveType;
import org.eclipse.vorto.core.api.model.functionblock.ReturnType;
import org.eclipse.vorto.core.api.model.functionblock.Status;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class JavaFunctionblockInterfaceTemplate implements ITemplate<FunctionblockModel> {
  private String classPackage;
  
  private String interfacePrefix;
  
  private String[] imports;
  
  private ITemplate<Property> propertyTemplate;
  
  private ITemplate<Param> parameterTemplate;
  
  public JavaFunctionblockInterfaceTemplate(final String classPackage, final String interfacePrefix, final String[] imports, final ITemplate<Property> propertyTemplate, final ITemplate<Param> parameterTemplate) {
    this.classPackage = classPackage;
    this.interfacePrefix = interfacePrefix;
    this.imports = imports;
    this.propertyTemplate = propertyTemplate;
    this.parameterTemplate = parameterTemplate;
  }
  
  @Override
  public String getContent(final FunctionblockModel fbm, final InvocationContext invocationContext) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("* The present code has been generated by the Eclipse Vorto Java Code Generator.");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* The basis for the generation was the Functionblock which is uniquely identified by:");
    _builder.newLine();
    _builder.append("* Name:\t\t\t");
    String _name = fbm.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Namespace:\t");
    String _namespace = fbm.getNamespace();
    _builder.append(_namespace, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Version:\t\t");
    String _version = fbm.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(this.classPackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      for(final String imprt : this.imports) {
        _builder.append("import ");
        _builder.append(imprt, "");
        _builder.append(".*;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* ");
    String _description = fbm.getDescription();
    _builder.append(_description, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public interface ");
    _builder.append(this.interfacePrefix, "");
    String _name_1 = fbm.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    FunctionBlock fb = fbm.getFunctionblock();
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      Status _status = fb.getStatus();
      boolean _notEquals = (!Objects.equal(_status, null));
      if (_notEquals) {
        {
          Status _status_1 = fb.getStatus();
          EList<Property> _properties = _status_1.getProperties();
          for(final Property property : _properties) {
            _builder.append("\t");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("* ");
            String _description_1 = property.getDescription();
            _builder.append(_description_1, "\t ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append(" ");
            _builder.append("*/");
            _builder.newLine();
            {
              boolean _isReadable = Utils.isReadable(property);
              if (_isReadable) {
                _builder.append("\t");
                String _propertyTypeAsString = CoAPUtils.getPropertyTypeAsString(property);
                _builder.append(_propertyTypeAsString, "\t");
                _builder.append(" get");
                String _name_2 = property.getName();
                String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
                _builder.append(_firstUpper_1, "\t");
                _builder.append("();");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              boolean _isWritable = Utils.isWritable(property);
              if (_isWritable) {
                _builder.append("\t");
                _builder.append("void set");
                String _name_3 = property.getName();
                String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
                _builder.append(_firstUpper_2, "\t");
                _builder.append("(");
                String _propertyTypeAsString_1 = CoAPUtils.getPropertyTypeAsString(property);
                _builder.append(_propertyTypeAsString_1, "\t");
                _builder.append(" ");
                String _name_4 = property.getName();
                String _firstLower = StringExtensions.toFirstLower(_name_4);
                _builder.append(_firstLower, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.newLine();
              }
            }
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Operation> _operations = fb.getOperations();
      for(final Operation op : _operations) {
        _builder.append("\t");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("* ");
        String _description_2 = op.getDescription();
        _builder.append(_description_2, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("*/");
        _builder.newLine();
        {
          ReturnType _returnType = op.getReturnType();
          if ((_returnType instanceof ReturnObjectType)) {
            _builder.append("\t");
            ReturnType _returnType_1 = op.getReturnType();
            ReturnObjectType objectType = ((ReturnObjectType) _returnType_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("public ");
            Type _returnType_2 = objectType.getReturnType();
            String _name_5 = _returnType_2.getName();
            _builder.append(_name_5, "\t");
            _builder.append(" ");
            String _name_6 = op.getName();
            _builder.append(_name_6, "\t");
            _builder.append("(");
            String _parameterString = this.getParameterString(op, invocationContext);
            _builder.append(_parameterString, "\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            ReturnType _returnType_3 = op.getReturnType();
            if ((_returnType_3 instanceof ReturnPrimitiveType)) {
              _builder.append("\t");
              ReturnType _returnType_4 = op.getReturnType();
              ReturnPrimitiveType primitiveType = ((ReturnPrimitiveType) _returnType_4);
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("public ");
              PrimitiveType _returnType_5 = primitiveType.getReturnType();
              String _name_7 = _returnType_5.getName();
              _builder.append(_name_7, "\t");
              _builder.append(" ");
              String _name_8 = op.getName();
              _builder.append(_name_8, "\t");
              _builder.append("(");
              String _parameterString_1 = this.getParameterString(op, invocationContext);
              _builder.append(_parameterString_1, "\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("public void ");
              String _name_9 = op.getName();
              _builder.append(_name_9, "\t");
              _builder.append("(");
              String _parameterString_2 = this.getParameterString(op, invocationContext);
              _builder.append(_parameterString_2, "\t");
              _builder.append("); ");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String getParameterString(final Operation op, final InvocationContext invocationContext) {
    String result = "";
    EList<Param> _params = op.getParams();
    for (final Param param : _params) {
      String _content = this.parameterTemplate.getContent(param, invocationContext);
      String _plus = ((result + ", ") + _content);
      result = _plus;
    }
    boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(result);
    if (_isNullOrEmpty) {
      return "";
    } else {
      int _length = result.length();
      String _substring = result.substring(2, _length);
      String _replaceAll = _substring.replaceAll("\n", "");
      return _replaceAll.replaceAll("\r", "");
    }
  }
}
