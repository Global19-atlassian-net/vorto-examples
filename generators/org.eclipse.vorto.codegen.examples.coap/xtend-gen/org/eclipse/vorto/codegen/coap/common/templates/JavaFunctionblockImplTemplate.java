/**
 * Copyright (c) 2015 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.coap.common.templates;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.ITemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.functionblock.Configuration;
import org.eclipse.vorto.core.api.model.functionblock.Fault;
import org.eclipse.vorto.core.api.model.functionblock.FunctionBlock;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.functionblock.Operation;
import org.eclipse.vorto.core.api.model.functionblock.Status;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class JavaFunctionblockImplTemplate implements ITemplate<FunctionblockModel> {
  private String classPackage;
  
  private String interfacePrefix;
  
  private String implSuffix;
  
  private String[] imports;
  
  private ITemplate<Property> propertyTemplate;
  
  private ITemplate<Operation> operationTemplate;
  
  public JavaFunctionblockImplTemplate(final String classPackage, final String interfacePrefix, final String implSuffix, final String[] imports, final ITemplate<Property> propertyTemplate, final ITemplate<Operation> operationTemplate) {
    this.classPackage = classPackage;
    this.interfacePrefix = interfacePrefix;
    this.implSuffix = implSuffix;
    this.imports = imports;
    this.propertyTemplate = propertyTemplate;
    this.operationTemplate = operationTemplate;
  }
  
  @Override
  public String getContent(final FunctionblockModel fbm, final InvocationContext invocationContext) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("* The present code has been generated by the Eclipse Vorto Java Code Generator.");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* The basis for the generation was the Functionblock which is uniquely identified by:");
    _builder.newLine();
    _builder.append("* Name:\t\t\t");
    String _name = fbm.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Namespace:\t");
    String _namespace = fbm.getNamespace();
    _builder.append(_namespace, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Version:\t\t");
    String _version = fbm.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(this.classPackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      for(final String imprt : this.imports) {
        _builder.append("import ");
        _builder.append(imprt, "");
        _builder.append(".*;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* ");
    String _description = fbm.getDescription();
    _builder.append(_description, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = fbm.getName();
    _builder.append(_name_1, "");
    _builder.append(this.implSuffix, "");
    _builder.append(" implements ");
    _builder.append(this.interfacePrefix, "");
    String _name_2 = fbm.getName();
    _builder.append(_name_2, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    FunctionBlock fb = fbm.getFunctionblock();
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    {
      Status _status = fb.getStatus();
      boolean _notEquals = (!Objects.equal(_status, null));
      if (_notEquals) {
        {
          Status _status_1 = fb.getStatus();
          EList<Property> _properties = _status_1.getProperties();
          for(final Property property : _properties) {
            _builder.append("\t");
            String _content = this.propertyTemplate.getContent(property, invocationContext);
            _builder.append(_content, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    {
      Configuration _configuration = fb.getConfiguration();
      boolean _notEquals_1 = (!Objects.equal(_configuration, null));
      if (_notEquals_1) {
        {
          Configuration _configuration_1 = fb.getConfiguration();
          EList<Property> _properties_1 = _configuration_1.getProperties();
          for(final Property property_1 : _properties_1) {
            _builder.append("\t");
            String _content_1 = this.propertyTemplate.getContent(property_1, invocationContext);
            _builder.append(_content_1, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    {
      Fault _fault = fb.getFault();
      boolean _notEquals_2 = (!Objects.equal(_fault, null));
      if (_notEquals_2) {
        {
          Fault _fault_1 = fb.getFault();
          EList<Property> _properties_2 = _fault_1.getProperties();
          for(final Property property_2 : _properties_2) {
            _builder.append("\t");
            String _content_2 = this.propertyTemplate.getContent(property_2, invocationContext);
            _builder.append(_content_2, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    {
      EList<Operation> _operations = fb.getOperations();
      for(final Operation operation : _operations) {
        _builder.append("\t");
        String _content_3 = this.operationTemplate.getContent(operation, invocationContext);
        _builder.append(_content_3, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
