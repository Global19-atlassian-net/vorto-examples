/**
 * Copyright (c) 2015 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.coap.server.templates;

import com.google.common.base.Objects;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.vorto.codegen.api.ITemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.coap.CoAPUtils;
import org.eclipse.vorto.codegen.utils.Utils;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.functionblock.Event;
import org.eclipse.vorto.core.api.model.functionblock.FunctionBlock;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.functionblock.Operation;
import org.eclipse.vorto.core.api.model.functionblock.Status;
import org.eclipse.vorto.core.api.model.informationmodel.FunctionblockProperty;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class CoAPServerTemplate implements ITemplate<InformationModel> {
  private String className;
  
  private String interfaceName;
  
  private String packageName;
  
  private String imports;
  
  public CoAPServerTemplate(final String className, final String classPackage, final String interfaceName, final String imports) {
    this.className = className;
    this.packageName = classPackage;
    this.interfaceName = interfaceName;
    this.imports = imports;
  }
  
  @Override
  public String getContent(final InformationModel im, final InvocationContext invocationContext) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("* The present code has been generated by the Eclipse Vorto CoAP Code Generator.");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* The basis for the generation was the Information Model which is uniquely identified by:");
    _builder.newLine();
    _builder.append("* Name:\t\t\t\t");
    String _name = im.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Namespace:\t");
    String _namespace = im.getNamespace();
    _builder.append(_namespace, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Version:\t\t");
    String _version = im.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(this.packageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    _builder.append(this.imports, "");
    _builder.append(".*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.eclipse.californium.core.CoapServer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(this.className);
    _builder.append(_firstUpper, "");
    _builder.append(" extends CoapServer {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* Constructor for a new CoAP server providing resources which are specified ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* in the given Information Model.");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _firstUpper_1 = StringExtensions.toFirstUpper(this.className);
    _builder.append(_firstUpper_1, "\t");
    _builder.append("(");
    _builder.append(this.interfaceName, "\t");
    _builder.append(" handler) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean VISIBLE = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean NOT_VISIBLE = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean GET = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean PUT = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean POST = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean DELETE = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean DISCOVER = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final boolean OBSERVE = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    EList<FunctionblockProperty> _properties = im.getProperties();
    final EMap<FunctionblockModel, EList<FunctionblockProperty>> map = CoAPUtils.sortByPropertyType(_properties);
    _builder.newLineIfNotEmpty();
    {
      Set<FunctionblockModel> _keySet = map.keySet();
      for(final FunctionblockModel resource : _keySet) {
        _builder.append("\t\t");
        _builder.append("add(new Link(\"");
        String _name_1 = resource.getName();
        String _firstLower = StringExtensions.toFirstLower(_name_1);
        _builder.append(_firstLower, "\t\t");
        _builder.append("\"){{");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("setVisible(VISIBLE);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("getAttributes().addAttribute(\"title\", \"");
        String _description = resource.getDescription();
        _builder.append(_description, "\t\t\t\t");
        _builder.append(" \");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}}");
        _builder.newLine();
        _builder.append("\t\t");
        EList<FunctionblockProperty> instances = map.get(resource);
        _builder.newLineIfNotEmpty();
        {
          for(final FunctionblockProperty instance : instances) {
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append(".add(new Link(\"");
            String _name_2 = instance.getName();
            String _firstLower_1 = StringExtensions.toFirstLower(_name_2);
            _builder.append(_firstLower_1, "\t\t\t");
            _builder.append("\"){{");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("setVisible(NOT_VISIBLE);");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("getAttributes().addAttribute(\"title\", \"");
            String _description_1 = instance.getDescription();
            _builder.append(_description_1, "\t\t\t\t\t");
            _builder.append(" \");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("}}");
            _builder.newLine();
            {
              FunctionblockModel _type = instance.getType();
              FunctionBlock _functionblock = _type.getFunctionblock();
              EList<Operation> _operations = _functionblock.getOperations();
              boolean _notEquals = (!Objects.equal(_operations, null));
              if (_notEquals) {
                {
                  FunctionblockModel _type_1 = instance.getType();
                  FunctionBlock _functionblock_1 = _type_1.getFunctionblock();
                  EList<Operation> _operations_1 = _functionblock_1.getOperations();
                  for(final Operation operation : _operations_1) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append(".add(new Resource(\"");
                    String _name_3 = operation.getName();
                    String _firstLower_2 = StringExtensions.toFirstLower(_name_3);
                    _builder.append(_firstLower_2, "\t\t\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("new Resource.Configuration(false, false, POST, false, false, false),");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("handler){{");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("setVisible(NOT_VISIBLE);");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("getAttributes().addAttribute(\"title\", \"");
                    String _description_2 = operation.getDescription();
                    _builder.append(_description_2, "\t\t\t\t\t");
                    _builder.append(" \");");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}})");
                    _builder.newLine();
                  }
                }
              }
            }
            {
              FunctionblockModel _type_2 = instance.getType();
              FunctionBlock _functionblock_2 = _type_2.getFunctionblock();
              EList<Event> _events = _functionblock_2.getEvents();
              boolean _notEquals_1 = (!Objects.equal(_events, null));
              if (_notEquals_1) {
                {
                  FunctionblockModel _type_3 = instance.getType();
                  FunctionBlock _functionblock_3 = _type_3.getFunctionblock();
                  EList<Event> _events_1 = _functionblock_3.getEvents();
                  for(final Event event : _events_1) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append(".add(new Resource(\"");
                    String _name_4 = event.getName();
                    String _firstLower_3 = StringExtensions.toFirstLower(_name_4);
                    _builder.append(_firstLower_3, "\t\t\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("new Resource.Configuration(false, false, false, false, false, OBSERVE),");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("handler){{");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("setVisible(NOT_VISIBLE);");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("getAttributes().addAttribute(\"obs\", \"\");");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}})");
                    _builder.newLine();
                  }
                }
              }
            }
            {
              FunctionblockModel _type_4 = instance.getType();
              FunctionBlock _functionblock_4 = _type_4.getFunctionblock();
              Status _status = _functionblock_4.getStatus();
              boolean _notEquals_2 = (!Objects.equal(_status, null));
              if (_notEquals_2) {
                {
                  FunctionblockModel _type_5 = instance.getType();
                  FunctionBlock _functionblock_5 = _type_5.getFunctionblock();
                  Status _status_1 = _functionblock_5.getStatus();
                  EList<Property> _properties_1 = _status_1.getProperties();
                  for(final Property status : _properties_1) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append(".add(new Resource(\"");
                    String _name_5 = status.getName();
                    String _firstLower_4 = StringExtensions.toFirstLower(_name_5);
                    _builder.append(_firstLower_4, "\t\t\t");
                    _builder.append("\",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    String _resourceConfiguration = this.getResourceConfiguration(status);
                    _builder.append(_resourceConfiguration, "\t\t\t\t");
                    _builder.append(",");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("handler){{");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("setVisible(NOT_VISIBLE);");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("getAttributes().addAttribute(\"title\", \"");
                    String _description_3 = status.getDescription();
                    _builder.append(_description_3, "\t\t\t\t\t");
                    _builder.append(" \");");
                    _builder.newLineIfNotEmpty();
                    {
                      boolean _isEventable = Utils.isEventable(status);
                      if (_isEventable) {
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("\t\t");
                        _builder.append("getAttributes().addAttribute(\"obs\", \"\");");
                        _builder.newLine();
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}})");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append(")");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append(");");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  private String getResourceConfiguration(final Property property) {
    String readable = "false";
    String writeable = "false";
    String eventable = "false";
    String result = "new Resource.Configuration(";
    boolean _isReadable = Utils.isReadable(property);
    if (_isReadable) {
      readable = "GET";
    }
    boolean _isWritable = Utils.isWritable(property);
    if (_isWritable) {
      writeable = "PUT";
    }
    boolean _isEventable = Utils.isEventable(property);
    if (_isEventable) {
      eventable = "OBSERVE";
    }
    return ((((((result + readable) + ", ") + writeable) + ", false, false, false, ") + eventable) + ")");
  }
}
