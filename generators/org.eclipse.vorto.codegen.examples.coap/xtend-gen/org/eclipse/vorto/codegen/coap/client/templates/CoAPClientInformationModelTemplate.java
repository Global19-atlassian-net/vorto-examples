/**
 * Copyright (c) 2015 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.coap.client.templates;

import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.ITemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.informationmodel.FunctionblockProperty;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class CoAPClientInformationModelTemplate implements ITemplate<InformationModel> {
  private String classPackage;
  
  private String[] imports;
  
  private String interfacePrefix;
  
  private String implSuffix;
  
  private ITemplate<FunctionblockProperty> propertyTemplate;
  
  private ITemplate<FunctionblockProperty> getterTemplate;
  
  private ITemplate<FunctionblockProperty> setterTemplate;
  
  public CoAPClientInformationModelTemplate(final String classPackage, final String interfacePrefix, final String implSuffix, final String[] imports, final ITemplate<FunctionblockProperty> propertyTemplate, final ITemplate<FunctionblockProperty> getterTemplate, final ITemplate<FunctionblockProperty> setterTemplate) {
    this.classPackage = classPackage;
    this.interfacePrefix = interfacePrefix;
    this.implSuffix = implSuffix;
    this.imports = imports;
    this.propertyTemplate = propertyTemplate;
    this.getterTemplate = getterTemplate;
    this.setterTemplate = setterTemplate;
  }
  
  @Override
  public String getContent(final InformationModel im, final InvocationContext invocationContext) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("* The present code has been generated by the Eclipse Vorto Java Code Generator.");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* The basis for the generation was the Information Model which is uniquely identified by:");
    _builder.newLine();
    _builder.append("* Name:\t\t\t");
    String _name = im.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Namespace:\t");
    String _namespace = im.getNamespace();
    _builder.append(_namespace, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Version:\t\t");
    String _version = im.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(this.classPackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      for(final String imprt : this.imports) {
        _builder.append("import ");
        _builder.append(imprt, "");
        _builder.append(".*;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append("* ");
    String _description = im.getDescription();
    _builder.append(_description, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = im.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append(" implements ");
    _builder.append(this.interfacePrefix, "");
    String _name_2 = im.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String BASE_URI = \"coap://localhost:5683\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<FunctionblockProperty> _properties = im.getProperties();
      for(final FunctionblockProperty fbProperty : _properties) {
        _builder.append("\t");
        String _content = this.propertyTemplate.getContent(fbProperty, invocationContext);
        _builder.append(_content, "\t");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("* The default constructor for ");
    String _name_3 = im.getName();
    String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
    _builder.append(_firstUpper_2, "\t");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_4 = im.getName();
    String _firstUpper_3 = StringExtensions.toFirstUpper(_name_4);
    _builder.append(_firstUpper_3, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    {
      EList<FunctionblockProperty> _properties_1 = im.getProperties();
      for(final FunctionblockProperty fbProperty_1 : _properties_1) {
        _builder.append("\t\t");
        _builder.append("// Use the standard implementation to initialize the ");
        FunctionblockModel _type = fbProperty_1.getType();
        String _name_5 = _type.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append(".");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _name_6 = fbProperty_1.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append(" = new ");
        FunctionblockModel _type_1 = fbProperty_1.getType();
        String _name_7 = _type_1.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append(this.implSuffix, "\t\t");
        _builder.append("(BASE_URI + \"/\" + \"");
        FunctionblockModel _type_2 = fbProperty_1.getType();
        String _name_8 = _type_2.getName();
        String _firstLower = StringExtensions.toFirstLower(_name_8);
        _builder.append(_firstLower, "\t\t");
        _builder.append("/");
        String _name_9 = fbProperty_1.getName();
        String _firstLower_1 = StringExtensions.toFirstLower(_name_9);
        _builder.append(_firstLower_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      EList<FunctionblockProperty> _properties_2 = im.getProperties();
      for(final FunctionblockProperty fbProperty_2 : _properties_2) {
        _builder.append("\t");
        String _content_1 = this.getterTemplate.getContent(fbProperty_2, invocationContext);
        _builder.append(_content_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t");
        String _content_2 = this.setterTemplate.getContent(fbProperty_2, invocationContext);
        _builder.append(_content_2, "\t");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
