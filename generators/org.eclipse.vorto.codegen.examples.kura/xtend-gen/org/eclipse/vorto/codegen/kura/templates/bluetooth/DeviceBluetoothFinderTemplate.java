/**
 * Copyright (c) 2015-2016 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.kura.templates.bluetooth;

import java.util.Map;
import org.eclipse.vorto.codegen.api.IFileTemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.kura.templates.Utils;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;

/**
 * @author Alexander Edelmann
 */
@SuppressWarnings("all")
public class DeviceBluetoothFinderTemplate implements IFileTemplate<InformationModel> {
  @Override
  public String getFileName(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = context.getName();
    _builder.append(_name, "");
    _builder.append("BluetoothFinder.java");
    return _builder.toString();
  }
  
  @Override
  public String getPath(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    String _javaPackageBasePath = Utils.getJavaPackageBasePath(context);
    _builder.append(_javaPackageBasePath, "");
    return _builder.toString();
  }
  
  @Override
  public String getContent(final InformationModel element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _javaPackage = Utils.getJavaPackage(element);
    _builder.append(_javaPackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.Executors;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ScheduledExecutorService;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.ScheduledFuture;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.TimeUnit;");
    _builder.newLine();
    _builder.append("import java.util.stream.Collectors;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.kura.bluetooth.BluetoothAdapter;");
    _builder.newLine();
    _builder.append("import org.eclipse.kura.bluetooth.BluetoothDevice;");
    _builder.newLine();
    _builder.append("import org.eclipse.kura.bluetooth.BluetoothLeScanListener;");
    _builder.newLine();
    _builder.append("import org.eclipse.kura.bluetooth.BluetoothService;");
    _builder.newLine();
    _builder.append("import org.eclipse.kura.configuration.ConfigurableComponent;");
    _builder.newLine();
    _builder.append("import org.osgi.service.component.ComponentContext;");
    _builder.newLine();
    _builder.append("import org.osgi.service.component.ComponentException;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    String _javaPackage_1 = Utils.getJavaPackage(element);
    _builder.append(_javaPackage_1, "");
    _builder.append(".cloud.IDataService;");
    _builder.newLineIfNotEmpty();
    {
      Map<String, String> _configurationProperties = context.getConfigurationProperties();
      String _orDefault = _configurationProperties.getOrDefault("boschcloud", "false");
      boolean _equalsIgnoreCase = _orDefault.equalsIgnoreCase("true");
      if (_equalsIgnoreCase) {
        _builder.append("import ");
        String _javaPackage_2 = Utils.getJavaPackage(element);
        _builder.append(_javaPackage_2, "");
        _builder.append(".cloud.bosch.BoschDataService;");
        _builder.newLineIfNotEmpty();
      } else {
        {
          Map<String, String> _configurationProperties_1 = context.getConfigurationProperties();
          String _orDefault_1 = _configurationProperties_1.getOrDefault("boschhub", "false");
          boolean _equalsIgnoreCase_1 = _orDefault_1.equalsIgnoreCase("true");
          if (_equalsIgnoreCase_1) {
            _builder.append("import ");
            String _javaPackage_3 = Utils.getJavaPackage(element);
            _builder.append(_javaPackage_3, "");
            _builder.append(".cloud.bosch.BoschHubDataService;");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("import org.eclipse.kura.cloud.CloudService;");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("public class ");
    String _name = element.getName();
    _builder.append(_name, "");
    _builder.append("BluetoothFinder implements ConfigurableComponent {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Logger logger = LoggerFactory.getLogger(");
    String _name_1 = element.getName();
    _builder.append(_name_1, "\t");
    _builder.append("BluetoothFinder.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private BluetoothAdapter bluetoothAdapter;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ScheduledExecutorService worker;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ScheduledFuture<?> scannerHandler;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ScheduledFuture<?> updateHandler;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _name_2 = element.getName();
    _builder.append(_name_2, "\t");
    _builder.append("Configuration configuration = null;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private IDataService dataService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private BluetoothService bluetoothService;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Object physicalDevicesLock = new Object();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<BluetoothDevice> physicalDevices = Collections.emptyList();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setBluetoothService(BluetoothService bluetoothService) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.bluetoothService = bluetoothService;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void unsetBluetoothService(BluetoothService bluetoothService) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.bluetoothService = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _and = false;
      Map<String, String> _configurationProperties_2 = context.getConfigurationProperties();
      String _orDefault_2 = _configurationProperties_2.getOrDefault("boschcloud", "false");
      boolean _equalsIgnoreCase_2 = _orDefault_2.equalsIgnoreCase("true");
      boolean _not = (!_equalsIgnoreCase_2);
      if (!_not) {
        _and = false;
      } else {
        Map<String, String> _configurationProperties_3 = context.getConfigurationProperties();
        String _orDefault_3 = _configurationProperties_3.getOrDefault("boschhub", "false");
        boolean _equalsIgnoreCase_3 = _orDefault_3.equalsIgnoreCase("true");
        boolean _not_1 = (!_equalsIgnoreCase_3);
        _and = _not_1;
      }
      if (_and) {
        _builder.append("\t");
        _builder.append("private CloudService cloudService;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void setCloudService(CloudService cloudService) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.cloudService = cloudService;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public void unsetCloudService(CloudService cloudService) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.cloudService = null;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Activation APIs");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void activate(ComponentContext context, Map<String, Object> properties) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.info(\"Activating ");
    String _name_3 = element.getName();
    _builder.append(_name_3, "\t\t");
    _builder.append(" App...\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("readProperties(properties);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("runApplication();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void deactivate(ComponentContext context) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cleanup();\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.debug(\"Deactivating ");
    String _name_4 = element.getName();
    _builder.append(_name_4, "\t\t");
    _builder.append(" App... Done.\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void updated(Map<String, Object> properties) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cleanup();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("readProperties(properties);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("runApplication();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.debug(\"Updating Bluetooth Service... Done.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void runApplication() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (configuration.enableScan) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.worker = Executors.newSingleThreadScheduledExecutor();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// Get Bluetooth adapter and ensure it is enabled");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("this.bluetoothAdapter = this.bluetoothService.getBluetoothAdapter(configuration.iname);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (this.bluetoothAdapter != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.info(\"Bluetooth adapter interface => \" + configuration.iname);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.info(\"Bluetooth adapter address => \" + this.bluetoothAdapter.getAddress());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.info(\"Bluetooth adapter le enabled => \" + this.bluetoothAdapter.isLeReady());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (!this.bluetoothAdapter.isEnabled()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("logger.info(\"Enabling bluetooth adapter...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("this.bluetoothAdapter.enable();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("logger.info(\"Bluetooth adapter address => \" + this.bluetoothAdapter.getAddress());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("this.scannerHandler = this.worker.scheduleAtFixedRate(this::scan, 0, configuration.scaninterval, TimeUnit.SECONDS);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("this.updateHandler = this.worker.scheduleAtFixedRate(this::update, 0, configuration.updateInterval, TimeUnit.SECONDS);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.warn(\"No Bluetooth adapter found ...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("logger.error(\"Error starting component\", e);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new ComponentException(e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void cleanup() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("logger.debug(\"Cleaning up ");
    String _name_5 = element.getName();
    _builder.append(_name_5, "\t\t");
    _builder.append(" App...\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (this.bluetoothAdapter != null && this.bluetoothAdapter.isScanning()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.debug(\"m_bluetoothAdapter.isScanning\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.bluetoothAdapter.killLeScan();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// cancel a current worker handle if one if active");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (this.scannerHandler != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.scannerHandler.cancel(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (this.updateHandler != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.updateHandler.cancel(true);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// shutting down the worker and cleaning up the properties");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (this.worker != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.worker.shutdown();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// cancel bluetoothAdapter");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.bluetoothAdapter = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Scanning task, performed every configuration.scaninterval seconds");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void scan() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.info(\"Starting bluetooth LE scan ...\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bluetoothAdapter.startLeScan(new BluetoothLeScanListener() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public void onScanFailed(int arg0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.error(\"Error during scan\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public void onScanResults(List<BluetoothDevice> scanResults) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("List<BluetoothDevice> scannedDevices = ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("scanResults.stream()");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// Filter for devices which are ours");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append(".filter(new ");
    String _name_6 = element.getName();
    _builder.append(_name_6, "\t\t\t\t\t\t\t");
    _builder.append("DeviceFilter(configuration))");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("// Add any device we haven\'t found yet");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append(".collect(Collectors.toList());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (!scannedDevices.isEmpty()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("synchronized(physicalDevicesLock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("physicalDevices = scannedDevices;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Kill after configuration.scantime seconds");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Executors.newSingleThreadScheduledExecutor().schedule(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.info(\"Killing the bluetooth LE scan ...\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("bluetoothAdapter.killLeScan();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}, configuration.scantime, TimeUnit.SECONDS);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Throwable e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.error(\"Error in scan()\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Update task, performed every configuration.updateInterval seconds");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void update() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<BluetoothDevice> updateDevices = Collections.emptyList();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("synchronized(physicalDevicesLock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("updateDevices =  physicalDevices;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("long startTime = System.currentTimeMillis();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("updateDevices.stream()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("// Map physical BLE device to an ");
    String _name_7 = element.getName();
    _builder.append(_name_7, "\t\t\t\t");
    _builder.append(" information model ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append(".map(new DeviceTo");
    String _name_8 = element.getName();
    _builder.append(_name_8, "\t\t\t\t");
    _builder.append("Transformer(configuration))");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("// Do something useful with the information model");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".forEach(new ");
    String _name_9 = element.getName();
    _builder.append(_name_9, "\t\t\t\t");
    _builder.append("Consumer(configuration, dataService));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("long estimatedTime = System.currentTimeMillis() - startTime;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.info(\"Elapsed time in publishing - \" + estimatedTime + \" milliseconds\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Throwable e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.error(\"Error in update()\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Private Methods");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// --------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void readProperties(Map<String, Object> properties) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (properties != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("configuration = ");
    String _name_10 = element.getName();
    _builder.append(_name_10, "\t\t\t");
    _builder.append("Configuration.configurationFrom(properties);");
    _builder.newLineIfNotEmpty();
    {
      Map<String, String> _configurationProperties_4 = context.getConfigurationProperties();
      String _orDefault_4 = _configurationProperties_4.getOrDefault("boschcloud", "false");
      boolean _equalsIgnoreCase_4 = _orDefault_4.equalsIgnoreCase("true");
      if (_equalsIgnoreCase_4) {
        _builder.append("\t\t\t");
        _builder.append("dataService = new BoschDataService(configuration.solutionId, configuration.endpoint);");
        _builder.newLine();
      } else {
        {
          Map<String, String> _configurationProperties_5 = context.getConfigurationProperties();
          String _orDefault_5 = _configurationProperties_5.getOrDefault("boschhub", "false");
          boolean _equalsIgnoreCase_5 = _orDefault_5.equalsIgnoreCase("true");
          if (_equalsIgnoreCase_5) {
            _builder.append("\t\t\t");
            _builder.append("dataService = new BoschHubDataService(configuration.hubUrl, configuration.hubTenant);");
            _builder.newLine();
          } else {
            _builder.append("\t\t\t");
            _builder.append("dataService = new KuraCloudDataService(cloudService, configuration);");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
