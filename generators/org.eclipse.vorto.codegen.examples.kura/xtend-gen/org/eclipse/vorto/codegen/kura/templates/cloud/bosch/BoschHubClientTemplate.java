package org.eclipse.vorto.codegen.kura.templates.cloud.bosch;

import org.eclipse.vorto.codegen.api.IFileTemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.kura.templates.Utils;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class BoschHubClientTemplate implements IFileTemplate<InformationModel> {
  @Override
  public String getFileName(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("BoschHubClient.java");
    return _builder.toString();
  }
  
  @Override
  public String getPath(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    String _javaPackageBasePath = Utils.getJavaPackageBasePath(context);
    _builder.append(_javaPackageBasePath, "");
    _builder.append("/cloud/bosch");
    return _builder.toString();
  }
  
  @Override
  public String getContent(final InformationModel element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _javaPackage = Utils.getJavaPackage(element);
    _builder.append(_javaPackage, "");
    _builder.append(".cloud.bosch;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.BufferedInputStream;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.InputStream;");
    _builder.newLine();
    _builder.append("import java.net.URL;");
    _builder.newLine();
    _builder.append("import java.security.KeyManagementException;");
    _builder.newLine();
    _builder.append("import java.security.KeyStore;");
    _builder.newLine();
    _builder.append("import java.security.KeyStoreException;");
    _builder.newLine();
    _builder.append("import java.security.NoSuchAlgorithmException;");
    _builder.newLine();
    _builder.append("import java.security.cert.Certificate;");
    _builder.newLine();
    _builder.append("import java.security.cert.CertificateException;");
    _builder.newLine();
    _builder.append("import java.security.cert.CertificateFactory;");
    _builder.newLine();
    _builder.append("import java.util.Objects;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.net.ssl.SSLContext;");
    _builder.newLine();
    _builder.append("import javax.net.ssl.SSLSocketFactory;");
    _builder.newLine();
    _builder.append("import javax.net.ssl.TrustManagerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.paho.client.mqttv3.IMqttActionListener;");
    _builder.newLine();
    _builder.append("import org.eclipse.paho.client.mqttv3.IMqttToken;");
    _builder.newLine();
    _builder.append("import org.eclipse.paho.client.mqttv3.MqttClient;");
    _builder.newLine();
    _builder.append("import org.eclipse.paho.client.mqttv3.MqttConnectOptions;");
    _builder.newLine();
    _builder.append("import org.eclipse.paho.client.mqttv3.MqttException;");
    _builder.newLine();
    _builder.append("import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BoschHubClient {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Logger logger = LoggerFactory.getLogger(BoschHubClient.class);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final URL CERTIFICATE_LOCATION = BoschHubClient.class.getResource(\"/secret/iothub.crt\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String mqttHostUrl;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String clientId;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MqttClient mqqtClient = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private MqttConnectOptions connOpts = null;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BoschHubClient(String mqttHostUrl, String clientId) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.mqttHostUrl = Objects.requireNonNull(mqttHostUrl);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.clientId = Objects.requireNonNull(clientId);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.info(String.format(\"Creating Hub Client for [%s] with Client Id [%s]\", mqttHostUrl, clientId));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("mqqtClient = new MqttClient(mqttHostUrl, clientId, new MemoryPersistence());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("connOpts = new MqttConnectOptions();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("connOpts.setSocketFactory(buildSslSocketFactory(CERTIFICATE_LOCATION));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (MqttException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.error(\"Exception connecting to Hono\", e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new RuntimeException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void connect() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.info(\"Connecting to Hub.\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IMqttToken token = mqqtClient.connectWithResult(connOpts);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("token.setActionCallback(new IMqttActionListener() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public void onFailure(IMqttToken arg0, Throwable arg1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.error(\"Failed to connect to Hono [\" + mqttHostUrl + \", \" + clientId + \"]\", arg1);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public void onSuccess(IMqttToken arg0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.info(\"Connected to Hono [\" + mqttHostUrl + \", \" + clientId + \"]\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.info(\"Hub Client CONNECTED.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (MqttException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new RuntimeException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void send(String topic, String message) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (mqqtClient != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (mqqtClient.isConnected()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.info(String.format(\"Sending topic [%s] message [%s]\", topic, message));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("mqqtClient.publish(topic, message.getBytes(), 0, false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.info(String.format(\"Send done.\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (MqttException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("logger.error(\"Mqqt Client has error in sending message.\", e);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("logger.error(\"Mqqt Client is not connected.\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new RuntimeException(\"MQQT Client is not connected.\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.error(\"Mqqt Client is not initialized.\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new RuntimeException(\"MQQT Client is not initialized.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isConnected() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return mqqtClient != null && mqqtClient.isConnected();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static SSLSocketFactory buildSslSocketFactory(URL certificateUrl) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("InputStream certificateInputstream = new BufferedInputStream(Objects.requireNonNull(certificateUrl).openStream());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Certificate certificate;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("certificate = certFactory.generateCertificate(certificateInputstream);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("certificateInputstream.close();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create a KeyStore containing our trusted CAs");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("keyStore.load(null, null);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("keyStore.setCertificateEntry(\"ca\", certificate);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create a TrustManager that trusts the CAs in our KeyStore");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tmf.init(keyStore);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// Create an SSLContext that uses our TrustManager");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("SSLContext context = SSLContext.getInstance(\"TLS\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("context.init(null, tmf.getTrustManagers(), null);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return context.getSocketFactory();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (NoSuchAlgorithmException | KeyStoreException | KeyManagementException | CertificateException | IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("logger.error(\"Error building ssl socket factory\", e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
