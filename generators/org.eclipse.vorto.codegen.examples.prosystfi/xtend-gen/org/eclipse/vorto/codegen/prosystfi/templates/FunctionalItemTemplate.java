/**
 * Copyright (c) 2016 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.prosystfi.templates;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.ITemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.tools.CodeGenTools;
import org.eclipse.vorto.core.api.model.datatype.Entity;
import org.eclipse.vorto.core.api.model.datatype.PrimitiveType;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.datatype.Type;
import org.eclipse.vorto.core.api.model.functionblock.Configuration;
import org.eclipse.vorto.core.api.model.functionblock.Fault;
import org.eclipse.vorto.core.api.model.functionblock.FunctionBlock;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.functionblock.Operation;
import org.eclipse.vorto.core.api.model.functionblock.ReturnObjectType;
import org.eclipse.vorto.core.api.model.functionblock.ReturnPrimitiveType;
import org.eclipse.vorto.core.api.model.functionblock.ReturnType;
import org.eclipse.vorto.core.api.model.functionblock.Status;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class FunctionalItemTemplate implements ITemplate<FunctionblockModel> {
  private String fiPackage;
  
  private String[] imports;
  
  public FunctionalItemTemplate(final String fiPackage, final String... imports) {
    this.fiPackage = fiPackage;
    this.imports = imports;
  }
  
  @Override
  public String getContent(final FunctionblockModel fbm, final InvocationContext ctx) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("* The present code has been generated by the Eclipse Vorto ProSyst Code Generator.");
    _builder.newLine();
    _builder.append("*");
    _builder.newLine();
    _builder.append("* The basis for the generation was the Functionblock which is uniquely identified by:");
    _builder.newLine();
    _builder.append("* Name:\t\t\t");
    String _name = fbm.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Namespace:\t");
    String _namespace = fbm.getNamespace();
    _builder.append(_namespace, "");
    _builder.newLineIfNotEmpty();
    _builder.append("* Version:\t\t");
    String _version = fbm.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("*****************************************************************************************");
    _builder.newLine();
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    _builder.append(this.fiPackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Collection;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    {
      for(final String imprt : this.imports) {
        _builder.append("import ");
        _builder.append(imprt, "");
        _builder.append(".*;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Description;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Getter;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Item;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Name;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Numeric;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Operation;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Property;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Setter;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.annotations.Version;");
    _builder.newLine();
    _builder.append("import com.prosyst.mbs.services.fim.FunctionalItem;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Item");
    _builder.newLine();
    _builder.append("@Name(\"");
    String _name_1 = fbm.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("@Description(\"");
    String _description = fbm.getDescription();
    _builder.append(_description, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("@Version(\"");
    String _version_1 = fbm.getVersion();
    _builder.append(_version_1, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public interface ");
    String _name_2 = fbm.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_1, "");
    _builder.append(" extends FunctionalItem {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    FunctionBlock fb = fbm.getFunctionblock();
    _builder.newLineIfNotEmpty();
    {
      Status _status = fb.getStatus();
      boolean _notEquals = (!Objects.equal(_status, null));
      if (_notEquals) {
        {
          Status _status_1 = fb.getStatus();
          EList<Property> _properties = _status_1.getProperties();
          for(final Property property : _properties) {
            _builder.append("\t");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("* Property definition for ");
            String _name_3 = property.getName();
            String _firstUpper_2 = StringExtensions.toFirstUpper(_name_3);
            _builder.append(_firstUpper_2, "\t");
            _builder.append(". ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("*/");
            _builder.newLine();
            {
              String _accessString = this.getAccessString(property, fb);
              boolean _equals = Objects.equal(_accessString, "RE");
              if (_equals) {
                _builder.append("\t");
                _builder.append("@Property");
                _builder.newLine();
              } else {
                _builder.append("\t");
                _builder.append("@Property(access = \"");
                String _accessString_1 = this.getAccessString(property, fb);
                _builder.append(_accessString_1, "\t");
                _builder.append("\")");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("@Description(\"");
            String _description_1 = property.getDescription();
            _builder.append(_description_1, "\t");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("String PROPERTY_");
            String _name_4 = property.getName();
            String _upperCase = _name_4.toUpperCase();
            _builder.append(_upperCase, "\t");
            _builder.append(" = \"");
            String _name_5 = property.getName();
            _builder.append(_name_5, "\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    {
      Configuration _configuration = fb.getConfiguration();
      boolean _notEquals_1 = (!Objects.equal(_configuration, null));
      if (_notEquals_1) {
        {
          Configuration _configuration_1 = fb.getConfiguration();
          EList<Property> _properties_1 = _configuration_1.getProperties();
          for(final Property property_1 : _properties_1) {
            _builder.append("\t");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("* Property definition for ");
            String _name_6 = property_1.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_6);
            _builder.append(_firstUpper_3, "\t");
            _builder.append(". ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("*/");
            _builder.newLine();
            {
              String _accessString_2 = this.getAccessString(property_1, fb);
              boolean _equals_1 = Objects.equal(_accessString_2, "RE");
              if (_equals_1) {
                _builder.append("\t");
                _builder.append("@Property");
                _builder.newLine();
              } else {
                _builder.append("\t");
                _builder.append("@Property(access = \"");
                String _accessString_3 = this.getAccessString(property_1, fb);
                _builder.append(_accessString_3, "\t");
                _builder.append("\")");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("@Description(\"");
            String _description_2 = property_1.getDescription();
            _builder.append(_description_2, "\t");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("String PROPERTY_");
            String _name_7 = property_1.getName();
            String _upperCase_1 = _name_7.toUpperCase();
            _builder.append(_upperCase_1, "\t");
            _builder.append(" = \"");
            String _name_8 = property_1.getName();
            _builder.append(_name_8, "\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    {
      Fault _fault = fb.getFault();
      boolean _notEquals_2 = (!Objects.equal(_fault, null));
      if (_notEquals_2) {
        {
          Fault _fault_1 = fb.getFault();
          EList<Property> _properties_2 = _fault_1.getProperties();
          for(final Property property_2 : _properties_2) {
            _builder.append("\t");
            _builder.append("/**");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("* Property definition for ");
            String _name_9 = property_2.getName();
            String _firstUpper_4 = StringExtensions.toFirstUpper(_name_9);
            _builder.append(_firstUpper_4, "\t");
            _builder.append(". ");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("*/");
            _builder.newLine();
            {
              String _accessString_4 = this.getAccessString(property_2, fb);
              boolean _equals_2 = Objects.equal(_accessString_4, "RE");
              if (_equals_2) {
                _builder.append("\t");
                _builder.append("@Property");
                _builder.newLine();
              } else {
                _builder.append("\t");
                _builder.append("@Property(access = \"");
                String _accessString_5 = this.getAccessString(property_2, fb);
                _builder.append(_accessString_5, "\t");
                _builder.append("\")");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("\t");
            _builder.append("@Description(\"");
            String _description_3 = property_2.getDescription();
            _builder.append(_description_3, "\t");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("String PROPERTY_");
            String _name_10 = property_2.getName();
            String _upperCase_2 = _name_10.toUpperCase();
            _builder.append(_upperCase_2, "\t");
            _builder.append(" = \"");
            String _name_11 = property_2.getName();
            _builder.append(_name_11, "\t");
            _builder.append("\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
          }
        }
      }
    }
    {
      EList<Operation> _operations = fb.getOperations();
      for(final Operation operation : _operations) {
        _builder.append("\t");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("* Operation definition for ");
        String _name_12 = operation.getName();
        String _firstUpper_5 = StringExtensions.toFirstUpper(_name_12);
        _builder.append(_firstUpper_5, "\t");
        _builder.append(".");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("*/");
        _builder.newLine();
        {
          boolean _isSetter = CodeGenTools.isSetter(operation, fb);
          if (_isSetter) {
            _builder.append("\t");
            _builder.append("@Setter(value=\"");
            String _name_13 = operation.getName();
            String _substring = _name_13.substring(3);
            String _firstLower = StringExtensions.toFirstLower(_substring);
            _builder.append(_firstLower, "\t");
            _builder.append("\")");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _isGetter = CodeGenTools.isGetter(operation, fb);
            if (_isGetter) {
              _builder.append("\t");
              _builder.append("@Getter(value=\"");
              String _name_14 = operation.getName();
              String _substring_1 = _name_14.substring(3);
              String _firstLower_1 = StringExtensions.toFirstLower(_substring_1);
              _builder.append(_firstLower_1, "\t");
              _builder.append("\")");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("@Operation");
              _builder.newLine();
            }
          }
        }
        _builder.append("\t");
        _builder.append("@Description(\"");
        String _description_4 = operation.getDescription();
        _builder.append(_description_4, "\t");
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
        {
          ReturnType _returnType = operation.getReturnType();
          boolean _equals_3 = Objects.equal(_returnType, null);
          if (_equals_3) {
            _builder.append("\t");
            _builder.append("void ");
            String _name_15 = operation.getName();
            _builder.append(_name_15, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
          } else {
            {
              ReturnType _returnType_1 = operation.getReturnType();
              if ((_returnType_1 instanceof ReturnObjectType)) {
                _builder.append("\t");
                ReturnType _returnType_2 = operation.getReturnType();
                Type type = ((ReturnObjectType) _returnType_2).getReturnType();
                _builder.newLineIfNotEmpty();
                {
                  if ((type instanceof Entity)) {
                    _builder.append("\t");
                    String _name_16 = ((Entity) type).getName();
                    _builder.append(_name_16, "\t");
                    _builder.append(" ");
                    String _name_17 = operation.getName();
                    _builder.append(_name_17, "\t");
                    _builder.append("();");
                    _builder.newLineIfNotEmpty();
                  } else {
                    if ((type instanceof org.eclipse.vorto.core.api.model.datatype.Enum)) {
                      _builder.append("\t");
                      String _name_18 = ((org.eclipse.vorto.core.api.model.datatype.Enum) type).getName();
                      _builder.append(_name_18, "\t");
                      _builder.append(" ");
                      String _name_19 = operation.getName();
                      _builder.append(_name_19, "\t");
                      _builder.append("();");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              } else {
                ReturnType _returnType_3 = operation.getReturnType();
                if ((_returnType_3 instanceof ReturnPrimitiveType)) {
                  _builder.append("\t");
                  ReturnType _returnType_4 = operation.getReturnType();
                  PrimitiveType type_1 = ((ReturnPrimitiveType) _returnType_4).getReturnType();
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  String _name_20 = type_1.getName();
                  _builder.append(_name_20, "\t");
                  _builder.append(" ");
                  String _name_21 = operation.getName();
                  _builder.append(_name_21, "\t");
                  _builder.append("();");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String getAccessString(final Property property, final FunctionBlock fb) {
    String accessString = null;
    boolean _isReadable = CodeGenTools.isReadable(property, fb);
    if (_isReadable) {
      accessString = "R";
    }
    boolean _isWritable = CodeGenTools.isWritable(property, fb);
    if (_isWritable) {
      accessString = (accessString + "W");
    }
    boolean _isEventable = CodeGenTools.isEventable(property, fb);
    if (_isEventable) {
      accessString = (accessString + "E");
    }
    return accessString;
  }
}
