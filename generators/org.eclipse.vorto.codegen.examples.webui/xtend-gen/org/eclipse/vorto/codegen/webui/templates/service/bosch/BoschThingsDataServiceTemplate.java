package org.eclipse.vorto.codegen.webui.templates.service.bosch;

import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.IFileTemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.webui.templates.TemplateUtils;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.informationmodel.FunctionblockProperty;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class BoschThingsDataServiceTemplate implements IFileTemplate<InformationModel> {
  @Override
  public String getFileName(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("BoschThingsDataService.java");
    return _builder.toString();
  }
  
  @Override
  public String getPath(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    String _baseApplicationPath = TemplateUtils.getBaseApplicationPath(context);
    _builder.append(_baseApplicationPath, "");
    _builder.append("/service/bosch");
    return _builder.toString();
  }
  
  @Override
  public String getContent(final InformationModel element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.iot.");
    String _name = element.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".service.bosch;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.CompletableFuture;");
    _builder.newLine();
    _builder.append("import java.util.function.Function;");
    _builder.newLine();
    _builder.append("import java.util.stream.Collectors;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.vorto.repository.api.ModelId;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.bosch.cr.integration.things.ThingIntegration;");
    _builder.newLine();
    _builder.append("import com.example.iot.");
    String _name_1 = element.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".model.*;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.example.iot.");
    String _name_2 = element.getName();
    String _lowerCase_2 = _name_2.toLowerCase();
    _builder.append(_lowerCase_2, "");
    _builder.append(".service.DataService;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.example.iot.");
    String _name_3 = element.getName();
    String _lowerCase_3 = _name_3.toLowerCase();
    _builder.append(_lowerCase_3, "");
    _builder.append(".service.Query;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.example.iot.");
    String _name_4 = element.getName();
    String _lowerCase_4 = _name_4.toLowerCase();
    _builder.append(_lowerCase_4, "");
    _builder.append(".service.bosch.model.Feature;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.example.iot.");
    String _name_5 = element.getName();
    String _lowerCase_5 = _name_5.toLowerCase();
    _builder.append(_lowerCase_5, "");
    _builder.append(".service.bosch.model.Thing;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.example.iot.");
    String _name_6 = element.getName();
    String _lowerCase_6 = _name_6.toLowerCase();
    _builder.append(_lowerCase_6, "");
    _builder.append(".service.bosch.model.ThingSearchResult;");
    _builder.newLineIfNotEmpty();
    _builder.append("import com.fasterxml.jackson.databind.ObjectMapper;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class BoschThingsDataService implements DataService {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Logger log = LoggerFactory.getLogger(BoschThingsDataService.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ThingIntegration thingsIntegration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ThingClient thingClient;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String SUBSCRIBER_PREFIX = \"/");
    String _name_7 = element.getName();
    String _lowerCase_7 = _name_7.toLowerCase();
    _builder.append(_lowerCase_7, "\t");
    _builder.append("/\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BoschThingsDataService(ThingClient thingClient, ThingIntegration integrationClient) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.thingClient = thingClient;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.thingsIntegration = integrationClient;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Query newQuery() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ThingsQuery();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<");
    String _name_8 = element.getName();
    _builder.append(_name_8, "\t");
    _builder.append("> queryThings(Query query) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("CompletableFuture<ThingSearchResult> result = thingClient.searchThings(query.getValue());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return result.get().getThings().stream().map(thingTo");
    String _name_9 = element.getName();
    _builder.append(_name_9, "\t\t\t");
    _builder.append(").collect(Collectors.toList());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("log.error(\"Problem when searching things\",e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Collections.emptyList();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _name_10 = element.getName();
    _builder.append(_name_10, "\t");
    _builder.append(" getThing(String thingId) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return thingTo");
    String _name_11 = element.getName();
    _builder.append(_name_11, "\t\t\t");
    _builder.append(".apply(thingClient.getThing(thingId).get());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("log.error(\"Problem when getting thing details\",e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void registerAsyncCallback(String thingId, DataCallback callback) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.thingsIntegration.forId(thingId).registerForFeatureChanges(getSubscriberId(thingId), featureChange -> {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("com.bosch.cr.model.things.Thing crThing = thingsIntegration.forId(thingId).retrieve().get();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Thing thing = Thing.newBuilder().fromThing(crThing).build();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("callback.onChange(thingTo");
    String _name_12 = element.getName();
    _builder.append(_name_12, "\t\t\t\t");
    _builder.append(".apply(thing));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("log.error(\"Error while retrieving thing\", e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void deregisterAsyncCallback(String thingId) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.thingsIntegration.forId(thingId).deregister(getSubscriberId(thingId));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String getSubscriberId(String thingId) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return SUBSCRIBER_PREFIX + thingId;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Function<Thing, ");
    String _name_13 = element.getName();
    _builder.append(_name_13, "\t");
    _builder.append("> thingTo");
    String _name_14 = element.getName();
    _builder.append(_name_14, "\t");
    _builder.append(" = (thing) -> {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _name_15 = element.getName();
    _builder.append(_name_15, "\t\t");
    _builder.append(" ");
    String _name_16 = element.getName();
    String _lowerCase_8 = _name_16.toLowerCase();
    _builder.append(_lowerCase_8, "\t\t");
    _builder.append(" = new ");
    String _name_17 = element.getName();
    _builder.append(_name_17, "\t\t");
    _builder.append("(thing.getId(), thing.getName(),");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("ModelId.fromPrettyFormat(thing.getThingTypeId()));");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_18 = element.getName();
    String _lowerCase_9 = _name_18.toLowerCase();
    _builder.append(_lowerCase_9, "\t\t");
    _builder.append(".setCreatedOn(thing.getCreatedOn());");
    _builder.newLineIfNotEmpty();
    {
      EList<FunctionblockProperty> _properties = element.getProperties();
      for(final FunctionblockProperty fbProperty : _properties) {
        _builder.append("\t\t");
        String _name_19 = element.getName();
        String _lowerCase_10 = _name_19.toLowerCase();
        _builder.append(_lowerCase_10, "\t\t");
        _builder.append(".set");
        String _name_20 = fbProperty.getName();
        String _firstUpper = StringExtensions.toFirstUpper(_name_20);
        _builder.append(_firstUpper, "\t\t");
        _builder.append("(convert(thing, \"");
        String _name_21 = fbProperty.getName();
        _builder.append(_name_21, "\t\t");
        _builder.append("\", ");
        FunctionblockModel _type = fbProperty.getType();
        String _name_22 = _type.getName();
        _builder.append(_name_22, "\t\t");
        _builder.append(".class));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("return ");
    String _name_23 = element.getName();
    String _lowerCase_11 = _name_23.toLowerCase();
    _builder.append(_lowerCase_11, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static <T> T convert(Thing thing, String propertyName, Class<T> expectedClass) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Feature feature = thing.listFeatures().get(propertyName);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (feature != null && feature.getProperties() != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Map<String, Object> statusProperty = (Map<String, Object>) feature.getProperties().get(\"status\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (statusProperty != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("statusProperty.remove(\"_modelId\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("final ObjectMapper mapper = new ObjectMapper();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("mapper.setDateFormat(Thing.JSON_DATE_FORMAT);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return mapper.convertValue(statusProperty, expectedClass);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
