/**
 * Copyright (c) 2015-2016 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.webui.templates.config;

import java.util.Map;
import org.eclipse.vorto.codegen.api.IFileTemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.webui.templates.TemplateUtils;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class LocalConfigurationTemplate implements IFileTemplate<InformationModel> {
  @Override
  public String getFileName(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("LocalConfiguration.java");
    return _builder.toString();
  }
  
  @Override
  public String getPath(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    String _baseApplicationPath = TemplateUtils.getBaseApplicationPath(context);
    _builder.append(_baseApplicationPath, "");
    _builder.append("/config");
    return _builder.toString();
  }
  
  @Override
  public String getContent(final InformationModel element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.iot.");
    String _name = element.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".config;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.concurrent.TimeUnit;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Value;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Bean;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.security.oauth2.client.OAuth2ClientContext;");
    _builder.newLine();
    _builder.append("import com.example.iot.");
    String _name_1 = element.getName();
    String _lowerCase_1 = _name_1.toLowerCase();
    _builder.append(_lowerCase_1, "");
    _builder.append(".service.DataService;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      Map<String, String> _configurationProperties = context.getConfigurationProperties();
      String _orDefault = _configurationProperties.getOrDefault("boschcloud", "false");
      boolean _equalsIgnoreCase = _orDefault.equalsIgnoreCase("true");
      if (_equalsIgnoreCase) {
        _builder.append("import com.bosch.cr.integration.IntegrationClient;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.client.IntegrationClientImpl;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.client.configuration.AuthenticationConfiguration;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.client.configuration.IntegrationClientConfiguration;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.client.configuration.ProxyConfiguration;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.client.configuration.ProxyConfiguration.ProxyOptionalSettable;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.client.configuration.PublicKeyAuthenticationConfiguration;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.client.configuration.TrustStoreConfiguration;");
        _builder.newLine();
        _builder.append("import com.bosch.cr.integration.things.ThingIntegration;");
        _builder.newLine();
        _builder.append("import com.example.iot.");
        String _name_2 = element.getName();
        String _lowerCase_2 = _name_2.toLowerCase();
        _builder.append(_lowerCase_2, "");
        _builder.append(".service.bosch.BoschThingsDataService;");
        _builder.newLineIfNotEmpty();
        _builder.append("import com.example.iot.");
        String _name_3 = element.getName();
        String _lowerCase_3 = _name_3.toLowerCase();
        _builder.append(_lowerCase_3, "");
        _builder.append(".service.bosch.ThingClient;");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("import com.example.iot.");
        String _name_4 = element.getName();
        String _lowerCase_4 = _name_4.toLowerCase();
        _builder.append(_lowerCase_4, "");
        _builder.append(".service.sample.SampleDataService;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("public class LocalConfiguration {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      Map<String, String> _configurationProperties_1 = context.getConfigurationProperties();
      String _orDefault_1 = _configurationProperties_1.getOrDefault("boschcloud", "false");
      boolean _equalsIgnoreCase_1 = _orDefault_1.equalsIgnoreCase("true");
      if (_equalsIgnoreCase_1) {
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.endpointUrl}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String thingEndpointUrl;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.apiToken}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String thingApiToken;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${http.proxyHost}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String proxyHost;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${http.proxyPort}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private int proxyPort;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.solutionid}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String thingsSolutionId;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.keystore.password}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String keystorePassword;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.alias}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String alias;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.alias.password}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String aliasPassword;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.keystoreLocation}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String keystoreLocation;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.trustStoreLocation}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String trustStoreLocation;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.trustStorePassword}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String trustStorePassword;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Value(\"${bosch.things.wsEndpointUrl}\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private String wsEndpointUrl;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Autowired");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("private OAuth2ClientContext oauth2context;");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Bean");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public DataService dataService() {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return new BoschThingsDataService(thingClient(),getThingIntegration());");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Bean");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ThingClient thingClient() {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return ThingClient.newBuilder()");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("//.withProxy(proxyHost, proxyPort)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append(".withEndpointUrl(thingEndpointUrl)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append(".withApiToken(thingApiToken)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append(".withOAuth2ClientContext(oauth2context)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append(".build();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("@Bean");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ThingIntegration getThingIntegration() {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("/* build an authentication configuration */");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("AuthenticationConfiguration authenticationConfiguration =");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t   ");
        _builder.append("PublicKeyAuthenticationConfiguration.newBuilder()");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".clientId(thingsSolutionId+\":\"+\"iotconsole_local\")");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".keyStoreLocation(LocalConfiguration.class.getResource(keystoreLocation))");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".keyStorePassword(keystorePassword)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".alias(alias)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".aliasPassword(aliasPassword)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".build();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("/* configure a truststore that contains trusted certificates */");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("TrustStoreConfiguration trustStore =");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t   ");
        _builder.append("TrustStoreConfiguration.newBuilder().location(LocalConfiguration.class.getResource(trustStoreLocation)).password(trustStorePassword).build();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("ProxyOptionalSettable proxyConfig = ProxyConfiguration.newBuilder().proxyHost(proxyHost).proxyPort(proxyPort);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("final IntegrationClientConfiguration integrationClientConfiguration =");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t   ");
        _builder.append("IntegrationClientConfiguration.newBuilder()");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".authenticationConfiguration(authenticationConfiguration)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".centralRegistryEndpointUrl(wsEndpointUrl)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".trustStoreConfiguration(trustStore)");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append("//.proxyConfiguration(proxyConfig.build())");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t      ");
        _builder.append(".build();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("final IntegrationClient integrationClient = IntegrationClientImpl.newInstance(integrationClientConfiguration);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("/* create a subscription for this client */");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("integrationClient.subscriptions().create().get(30, TimeUnit.SECONDS);");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("/*");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t ");
        _builder.append("* start consuming events that were triggered by the subscription,");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t ");
        _builder.append("* usually this method is called after all handlers are registered.");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("integrationClient.subscriptions().consume().get(30, TimeUnit.SECONDS);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("} catch (Exception e) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("throw new RuntimeException(e);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return integrationClient.things();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("@Bean");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public DataService dataService() {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("return new SampleDataService();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
