package org.eclipse.vorto.codegen.webui.templates.service.bosch.internal;

import org.eclipse.vorto.codegen.api.IFileTemplate;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.webui.templates.TemplateUtils;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class AsyncInvocationTemplate implements IFileTemplate<InformationModel> {
  @Override
  public String getFileName(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("AsyncInvocationTemplate.java");
    return _builder.toString();
  }
  
  @Override
  public String getPath(final InformationModel context) {
    StringConcatenation _builder = new StringConcatenation();
    String _baseApplicationPath = TemplateUtils.getBaseApplicationPath(context);
    _builder.append(_baseApplicationPath, "");
    _builder.append("/service/bosch/internal");
    return _builder.toString();
  }
  
  @Override
  public String getContent(final InformationModel element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package com.example.iot.");
    String _name = element.getName();
    String _lowerCase = _name.toLowerCase();
    _builder.append(_lowerCase, "");
    _builder.append(".service.bosch.internal;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.lang.reflect.Type;");
    _builder.newLine();
    _builder.append("import java.util.concurrent.CompletableFuture;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.apache.http.HttpHeaders;");
    _builder.newLine();
    _builder.append("import org.apache.http.client.HttpClient;");
    _builder.newLine();
    _builder.append("import org.apache.http.client.methods.HttpUriRequest;");
    _builder.newLine();
    _builder.append("import org.apache.http.impl.client.HttpClients;");
    _builder.newLine();
    _builder.append("import org.apache.http.util.EntityUtils;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.gson.Gson;");
    _builder.newLine();
    _builder.append("import com.google.gson.reflect.TypeToken;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AsyncInvocationTemplate {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Gson gson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AsyncInvocationTemplate(Gson gson) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.gson = gson;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public <Result> CompletableFuture<Result> execute(final HttpUriRequest request, Type type) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("preSend(request);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return CompletableFuture.supplyAsync(() -> {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("final HttpClient httpClient = HttpClients.createDefault();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return httpClient.execute(request, response -> {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("int statusCode = response.getStatusLine().getStatusCode();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (statusCode >= 200 && statusCode <= 299) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (type.equals(Void.class)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String json = EntityUtils.toString(response.getEntity(), \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return gson.fromJson(json, type);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} else if (statusCode == 400) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new IllegalArgumentException(\"Error executing async call, bad request.\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} else if (statusCode == 401) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new RuntimeException(\"Error executing async call, not able to authenticate with the server\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} else if (statusCode == 403) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new RuntimeException(\"Error executing async call, not able to autorize with the server\");\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} else if (statusCode == 404) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("throw new RuntimeException(\"Error while executing async call, server respond with a status of:  \" + response.getStatusLine().getStatusCode());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new RuntimeException(\"Error executing async call to remote REST endpoint\", e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public <Result> CompletableFuture<Result> execute(HttpUriRequest request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return execute(request,new TypeToken<Result>(){}.getType());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void preSend(HttpUriRequest request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("request.addHeader(HttpHeaders.CONTENT_TYPE, \"application/json\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("request.addHeader(HttpHeaders.ACCEPT, \"application/json\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
