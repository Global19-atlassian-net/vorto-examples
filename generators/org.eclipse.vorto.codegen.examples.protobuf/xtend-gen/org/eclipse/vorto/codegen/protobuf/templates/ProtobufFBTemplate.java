/**
 * Copyright (c) 2015, 2016 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.protobuf.templates;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.protobuf.templates.ProtobufTemplate;
import org.eclipse.vorto.core.api.model.datatype.PrimitiveType;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.datatype.PropertyType;
import org.eclipse.vorto.core.api.model.datatype.Type;
import org.eclipse.vorto.core.api.model.functionblock.FunctionBlock;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.functionblock.Operation;
import org.eclipse.vorto.core.api.model.functionblock.Param;
import org.eclipse.vorto.core.api.model.functionblock.PrimitiveParam;
import org.eclipse.vorto.core.api.model.functionblock.RefParam;
import org.eclipse.vorto.core.api.model.functionblock.ReturnObjectType;
import org.eclipse.vorto.core.api.model.functionblock.ReturnPrimitiveType;
import org.eclipse.vorto.core.api.model.functionblock.ReturnType;
import org.eclipse.vorto.core.api.model.functionblock.Status;
import org.eclipse.vorto.core.api.model.model.ModelReference;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class ProtobufFBTemplate extends ProtobufTemplate<FunctionblockModel> {
  @Override
  public String getContent(final FunctionblockModel element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Generated by Vorto from ");
    String _namespace = element.getNamespace();
    _builder.append(_namespace, "");
    _builder.append(".");
    String _name = element.getName();
    _builder.append(_name, "");
    _builder.append(":");
    String _version = element.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("syntax = \"proto3\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("package ");
    String _namespace_1 = element.getNamespace();
    _builder.append(_namespace_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import \"org/eclipse/vorto/meta.proto\";");
    _builder.newLine();
    _builder.newLine();
    {
      EList<ModelReference> _references = element.getReferences();
      for(final ModelReference reference : _references) {
        _builder.append("import \"");
        String _importedNamespace = reference.getImportedNamespace();
        String _lowerCase = _importedNamespace.toLowerCase();
        String _replace = _lowerCase.replace(".", "/");
        _builder.append(_replace, "");
        _builder.append(".proto\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.append("message ");
    String _name_1 = element.getName();
    _builder.append(_name_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("org.eclipse.vorto.Meta meta = 1;");
    _builder.newLine();
    {
      FunctionBlock _functionblock = element.getFunctionblock();
      Status _status = _functionblock.getStatus();
      boolean _notEquals = (!Objects.equal(_status, null));
      if (_notEquals) {
        _builder.append("\t");
        String _name_2 = element.getName();
        _builder.append(_name_2, "\t");
        _builder.append("Status status = 2;");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("service ");
    String _name_3 = element.getName();
    _builder.append(_name_3, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      FunctionBlock _functionblock_1 = element.getFunctionblock();
      EList<Operation> _operations = _functionblock_1.getOperations();
      boolean _notEquals_1 = (!Objects.equal(_operations, null));
      if (_notEquals_1) {
        {
          FunctionBlock _functionblock_2 = element.getFunctionblock();
          EList<Operation> _operations_1 = _functionblock_2.getOperations();
          for(final Operation operation : _operations_1) {
            _builder.append("\t");
            {
              String _description = operation.getDescription();
              boolean _notEquals_2 = (!Objects.equal(_description, null));
              if (_notEquals_2) {
                _builder.append("//");
                String _description_1 = operation.getDescription();
                _builder.append(_description_1, "\t");
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("rpc ");
            String _name_4 = operation.getName();
            _builder.append(_name_4, "\t");
            _builder.append("(");
            String _name_5 = operation.getName();
            String _firstUpper = StringExtensions.toFirstUpper(_name_5);
            _builder.append(_firstUpper, "\t");
            _builder.append("Request) returns (");
            String _name_6 = operation.getName();
            String _firstUpper_1 = StringExtensions.toFirstUpper(_name_6);
            _builder.append(_firstUpper_1, "\t");
            _builder.append("Response) {}");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      FunctionBlock _functionblock_3 = element.getFunctionblock();
      Status _status_1 = _functionblock_3.getStatus();
      boolean _notEquals_3 = (!Objects.equal(_status_1, null));
      if (_notEquals_3) {
        _builder.append("\t");
        _builder.append("rpc getStatus(StatusRequest) returns (StatusResponse) {}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      FunctionBlock _functionblock_4 = element.getFunctionblock();
      EList<Operation> _operations_2 = _functionblock_4.getOperations();
      boolean _notEquals_4 = (!Objects.equal(_operations_2, null));
      if (_notEquals_4) {
        {
          FunctionBlock _functionblock_5 = element.getFunctionblock();
          EList<Operation> _operations_3 = _functionblock_5.getOperations();
          for(final Operation operation_1 : _operations_3) {
            {
              EList<Param> _params = operation_1.getParams();
              boolean _notEquals_5 = (!Objects.equal(_params, null));
              if (_notEquals_5) {
                _builder.append("message ");
                String _name_7 = operation_1.getName();
                String _firstUpper_2 = StringExtensions.toFirstUpper(_name_7);
                _builder.append(_firstUpper_2, "");
                _builder.append("Request {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                EList<Param> _params_1 = operation_1.getParams();
                CharSequence _generateMessagePropertiesFromParams = this.generateMessagePropertiesFromParams(_params_1);
                _builder.append(_generateMessagePropertiesFromParams, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("message ");
            String _name_8 = operation_1.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_8);
            _builder.append(_firstUpper_3, "");
            _builder.append("Response {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            ReturnType _returnType = operation_1.getReturnType();
            CharSequence _generateMessagePropertiesFromReturnType = this.generateMessagePropertiesFromReturnType(_returnType);
            _builder.append(_generateMessagePropertiesFromReturnType, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.newLine();
    {
      FunctionBlock _functionblock_6 = element.getFunctionblock();
      Status _status_2 = _functionblock_6.getStatus();
      boolean _notEquals_6 = (!Objects.equal(_status_2, null));
      if (_notEquals_6) {
        _builder.append("message ");
        String _name_9 = element.getName();
        _builder.append(_name_9, "");
        _builder.append("Status {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        FunctionBlock _functionblock_7 = element.getFunctionblock();
        Status _status_3 = _functionblock_7.getStatus();
        EList<Property> _properties = _status_3.getProperties();
        CharSequence _generateMessageProperties = this.generateMessageProperties(_properties);
        _builder.append(_generateMessageProperties, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("message StatusRequest {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("// empty");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("message StatusResponse {");
        _builder.newLine();
        _builder.append("\t");
        FunctionBlock _functionblock_8 = element.getFunctionblock();
        Status _status_4 = _functionblock_8.getStatus();
        EList<Property> _properties_1 = _status_4.getProperties();
        CharSequence _generateMessageProperties_1 = this.generateMessageProperties(_properties_1);
        _builder.append(_generateMessageProperties_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    return _builder.toString();
  }
  
  public CharSequence generateMessageProperties(final List<Property> properties) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(properties, null));
      if (_notEquals) {
        int counter = 1;
        _builder.newLineIfNotEmpty();
        {
          for(final Property property : properties) {
            {
              boolean _isMultiplicity = property.isMultiplicity();
              if (_isMultiplicity) {
                _builder.append("repeated ");
              }
            }
            PropertyType _type = property.getType();
            String _type_1 = this.type(_type);
            _builder.append(_type_1, "");
            _builder.append(" ");
            String _name = property.getName();
            _builder.append(_name, "");
            _builder.append(" = ");
            int _plusPlus = counter++;
            _builder.append(_plusPlus, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateMessagePropertiesFromReturnType(final ReturnType returnType) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      boolean _notEquals = (!Objects.equal(returnType, null));
      if (!_notEquals) {
        _and = false;
      } else {
        _and = (returnType instanceof ReturnPrimitiveType);
      }
      if (_and) {
        {
          boolean _isMultiplicity = returnType.isMultiplicity();
          if (_isMultiplicity) {
            _builder.append("repeated ");
          }
        }
        PrimitiveType _returnType = ((ReturnPrimitiveType) returnType).getReturnType();
        String _protoPrimitive = this.toProtoPrimitive(_returnType);
        _builder.append(_protoPrimitive, "");
        _builder.append(" value = 1;");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _and_1 = false;
      boolean _notEquals_1 = (!Objects.equal(returnType, null));
      if (!_notEquals_1) {
        _and_1 = false;
      } else {
        _and_1 = (returnType instanceof ReturnObjectType);
      }
      if (_and_1) {
        {
          boolean _isMultiplicity_1 = returnType.isMultiplicity();
          if (_isMultiplicity_1) {
            _builder.append("repeated ");
          }
        }
        Type _returnType_1 = ((ReturnObjectType) returnType).getReturnType();
        String _name = _returnType_1.getName();
        _builder.append(_name, "");
        _builder.append(" value = 1;");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateMessagePropertiesFromParams(final List<Param> params) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(params, null));
      if (_notEquals) {
        int counter = 1;
        _builder.newLineIfNotEmpty();
        {
          for(final Param param : params) {
            {
              boolean _isMultiplicity = param.isMultiplicity();
              if (_isMultiplicity) {
                _builder.append("repeated ");
              }
            }
            String _type = this.type(param);
            _builder.append(_type, "");
            _builder.append(" ");
            String _name = param.getName();
            _builder.append(_name, "");
            _builder.append(" = ");
            int _plusPlus = counter++;
            _builder.append(_plusPlus, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public String type(final Param param) {
    if ((param instanceof PrimitiveParam)) {
      PrimitiveType _type = ((PrimitiveParam) param).getType();
      return this.toProtoPrimitive(_type);
    } else {
      Type _type_1 = ((RefParam) param).getType();
      return _type_1.getName();
    }
  }
}
