/**
 * Copyright (c) 2015, 2016 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.protobuf.templates;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.protobuf.templates.ProtobufTemplate;
import org.eclipse.vorto.core.api.model.datatype.Entity;
import org.eclipse.vorto.core.api.model.datatype.Property;
import org.eclipse.vorto.core.api.model.datatype.PropertyType;
import org.eclipse.vorto.core.api.model.model.ModelReference;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ProtobufEntityTemplate extends ProtobufTemplate<Entity> {
  @Override
  public String getContent(final Entity element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Generated by Vorto from ");
    String _namespace = element.getNamespace();
    _builder.append(_namespace, "");
    _builder.append(".");
    String _name = element.getName();
    _builder.append(_name, "");
    _builder.append(":");
    String _version = element.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("syntax = \"proto3\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("package ");
    String _namespace_1 = element.getNamespace();
    _builder.append(_namespace_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("import \"org/eclipse/vorto/meta.proto\";");
    _builder.newLine();
    _builder.newLine();
    {
      EList<ModelReference> _references = element.getReferences();
      for(final ModelReference reference : _references) {
        _builder.append("import \"");
        String _importedNamespace = reference.getImportedNamespace();
        String _lowerCase = _importedNamespace.toLowerCase();
        String _replace = _lowerCase.replace(".", "/");
        _builder.append(_replace, "");
        _builder.append(".proto\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      String _description = element.getDescription();
      boolean _notEquals = (!Objects.equal(_description, null));
      if (_notEquals) {
        _builder.append("//");
        String _description_1 = element.getDescription();
        _builder.append(_description_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("message ");
    String _name_1 = element.getName();
    _builder.append(_name_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("org.eclipse.vorto.Meta meta = 1;");
    _builder.newLine();
    _builder.append("\t");
    EList<Property> _properties = element.getProperties();
    CharSequence _generateMessageProperties = this.generateMessageProperties(_properties);
    _builder.append(_generateMessageProperties, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public CharSequence generateMessageProperties(final List<Property> properties) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(properties, null));
      if (_notEquals) {
        int counter = 1;
        _builder.newLineIfNotEmpty();
        {
          for(final Property property : properties) {
            {
              boolean _isMultiplicity = property.isMultiplicity();
              if (_isMultiplicity) {
                _builder.append("repeated ");
              }
            }
            PropertyType _type = property.getType();
            String _type_1 = this.type(_type);
            _builder.append(_type_1, "");
            _builder.append(" ");
            String _name = property.getName();
            _builder.append(_name, "");
            _builder.append(" = ");
            int _plusPlus = counter++;
            _builder.append(_plusPlus, "");
            _builder.append("; ");
            {
              String _description = property.getDescription();
              boolean _notEquals_1 = (!Objects.equal(_description, null));
              if (_notEquals_1) {
                _builder.append("//");
                String _description_1 = property.getDescription();
                _builder.append(_description_1, "");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
}
