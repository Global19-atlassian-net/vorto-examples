/**
 * Copyright (c) 2015, 2016 Bosch Software Innovations GmbH and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v1.0 which accompany this distribution.
 * 
 * The Eclipse Public License is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * The Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 * 
 * Contributors:
 * Bosch Software Innovations GmbH - Please refer to git log
 */
package org.eclipse.vorto.codegen.protobuf.templates;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.vorto.codegen.api.InvocationContext;
import org.eclipse.vorto.codegen.protobuf.templates.ProtobufTemplate;
import org.eclipse.vorto.core.api.model.functionblock.FunctionblockModel;
import org.eclipse.vorto.core.api.model.informationmodel.FunctionblockProperty;
import org.eclipse.vorto.core.api.model.informationmodel.InformationModel;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class ProtobufIMTemplate extends ProtobufTemplate<InformationModel> {
  @Override
  public String getContent(final InformationModel element, final InvocationContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Generated by Vorto from ");
    String _namespace = element.getNamespace();
    _builder.append(_namespace, "");
    _builder.append(".");
    String _name = element.getName();
    _builder.append(_name, "");
    _builder.append(":");
    String _version = element.getVersion();
    _builder.append(_version, "");
    _builder.newLineIfNotEmpty();
    _builder.append("syntax = \"proto3\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("package ");
    String _namespace_1 = element.getNamespace();
    _builder.append(_namespace_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("import \"org/eclipse/vorto/meta.proto\";");
    _builder.newLine();
    {
      EList<FunctionblockProperty> _properties = element.getProperties();
      for(final FunctionblockProperty fbProperty : _properties) {
        _builder.append("import \"");
        FunctionblockModel _type = fbProperty.getType();
        String _namespace_2 = _type.getNamespace();
        String _replace = _namespace_2.replace(".", "/");
        _builder.append(_replace, "");
        _builder.append("/");
        FunctionblockModel _type_1 = fbProperty.getType();
        String _name_1 = _type_1.getName();
        String _lowerCase = _name_1.toLowerCase();
        _builder.append(_lowerCase, "");
        _builder.append(".proto\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("message ");
    String _name_2 = element.getName();
    _builder.append(_name_2, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("org.eclipse.vorto.Meta meta = 1;");
    _builder.newLine();
    _builder.append("\t");
    int counter = 2;
    _builder.newLineIfNotEmpty();
    {
      EList<FunctionblockProperty> _properties_1 = element.getProperties();
      for(final FunctionblockProperty fbProperty_1 : _properties_1) {
        _builder.append("\t");
        FunctionblockModel _type_2 = fbProperty_1.getType();
        String _namespace_3 = _type_2.getNamespace();
        _builder.append(_namespace_3, "\t");
        _builder.append(".");
        FunctionblockModel _type_3 = fbProperty_1.getType();
        String _name_3 = _type_3.getName();
        _builder.append(_name_3, "\t");
        _builder.append(" ");
        String _name_4 = fbProperty_1.getName();
        _builder.append(_name_4, "\t");
        _builder.append(" = ");
        int _plusPlus = counter++;
        _builder.append(_plusPlus, "\t");
        _builder.append("; ");
        {
          String _description = fbProperty_1.getDescription();
          boolean _notEquals = (!Objects.equal(_description, null));
          if (_notEquals) {
            _builder.append("//");
            String _description_1 = fbProperty_1.getDescription();
            _builder.append(_description_1, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
}
